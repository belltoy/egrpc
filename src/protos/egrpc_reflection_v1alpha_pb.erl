%% -*- coding: utf-8 -*-
%% @private
%% Automatically @generated, do not edit
%% Generated by gpb_compile version 4.21.3
%% Version source: file
-module(egrpc_reflection_v1alpha_pb).

-export([encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/3, merge_msgs/4]).
-export([verify_msg/2, verify_msg/3]).
-export([to_json/2, to_json/3]).
-export([from_json/2, from_json/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([fqbin_to_msg_name/1]).
-export([msg_name_to_fqbin/1]).
-export([fqbin_to_enum_name/1]).
-export([enum_name_to_fqbin/1]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([get_all_source_basenames/0]).
-export([get_all_proto_names/0]).
-export([get_msg_containment/1]).
-export([get_pkg_containment/1]).
-export([get_service_containment/1]).
-export([get_rpc_containment/1]).
-export([get_enum_containment/1]).
-export([get_proto_by_msg_name_as_fqbin/1]).
-export([get_proto_by_service_name_as_fqbin/1]).
-export([get_proto_by_enum_name_as_fqbin/1]).
-export([get_protos_by_pkg_name_as_fqbin/1]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).
-export([gpb_version_source/0]).


%% enumerated types

-export_type([]).

%% message types
-type 'grpc.reflection.v1alpha.ServerReflectionRequest'() ::
      #{host                    => unicode:chardata(), % = 1, optional
        message_request         => {file_by_filename, unicode:chardata()} | {file_containing_symbol, unicode:chardata()} | {file_containing_extension, 'grpc.reflection.v1alpha.ExtensionRequest'()} | {all_extension_numbers_of_type, unicode:chardata()} | {list_services, unicode:chardata()} % oneof
       }.

-type 'grpc.reflection.v1alpha.ExtensionRequest'() ::
      #{containing_type         => unicode:chardata(), % = 1, optional
        extension_number        => integer()        % = 2, optional, 32 bits
       }.

-type 'grpc.reflection.v1alpha.ServerReflectionResponse'() ::
      #{valid_host              => unicode:chardata(), % = 1, optional
        original_request        => 'grpc.reflection.v1alpha.ServerReflectionRequest'(), % = 2, optional
        message_response        => {file_descriptor_response, 'grpc.reflection.v1alpha.FileDescriptorResponse'()} | {all_extension_numbers_response, 'grpc.reflection.v1alpha.ExtensionNumberResponse'()} | {list_services_response, 'grpc.reflection.v1alpha.ListServiceResponse'()} | {error_response, 'grpc.reflection.v1alpha.ErrorResponse'()} % oneof
       }.

-type 'grpc.reflection.v1alpha.FileDescriptorResponse'() ::
      #{file_descriptor_proto   => [iodata()]       % = 1, repeated
       }.

-type 'grpc.reflection.v1alpha.ExtensionNumberResponse'() ::
      #{base_type_name          => unicode:chardata(), % = 1, optional
        extension_number        => [integer()]      % = 2, repeated, 32 bits
       }.

-type 'grpc.reflection.v1alpha.ListServiceResponse'() ::
      #{service                 => ['grpc.reflection.v1alpha.ServiceResponse'()] % = 1, repeated
       }.

-type 'grpc.reflection.v1alpha.ServiceResponse'() ::
      #{name                    => unicode:chardata() % = 1, optional
       }.

-type 'grpc.reflection.v1alpha.ErrorResponse'() ::
      #{error_code              => integer(),       % = 1, optional, 32 bits
        error_message           => unicode:chardata() % = 2, optional
       }.

-export_type(['grpc.reflection.v1alpha.ServerReflectionRequest'/0, 'grpc.reflection.v1alpha.ExtensionRequest'/0, 'grpc.reflection.v1alpha.ServerReflectionResponse'/0, 'grpc.reflection.v1alpha.FileDescriptorResponse'/0, 'grpc.reflection.v1alpha.ExtensionNumberResponse'/0, 'grpc.reflection.v1alpha.ListServiceResponse'/0, 'grpc.reflection.v1alpha.ServiceResponse'/0, 'grpc.reflection.v1alpha.ErrorResponse'/0]).
-type '$msg_name'() :: 'grpc.reflection.v1alpha.ServerReflectionRequest' | 'grpc.reflection.v1alpha.ExtensionRequest' | 'grpc.reflection.v1alpha.ServerReflectionResponse' | 'grpc.reflection.v1alpha.FileDescriptorResponse' | 'grpc.reflection.v1alpha.ExtensionNumberResponse' | 'grpc.reflection.v1alpha.ListServiceResponse' | 'grpc.reflection.v1alpha.ServiceResponse' | 'grpc.reflection.v1alpha.ErrorResponse'.
-type '$msg'() :: 'grpc.reflection.v1alpha.ServerReflectionRequest'() | 'grpc.reflection.v1alpha.ExtensionRequest'() | 'grpc.reflection.v1alpha.ServerReflectionResponse'() | 'grpc.reflection.v1alpha.FileDescriptorResponse'() | 'grpc.reflection.v1alpha.ExtensionNumberResponse'() | 'grpc.reflection.v1alpha.ListServiceResponse'() | 'grpc.reflection.v1alpha.ServiceResponse'() | 'grpc.reflection.v1alpha.ErrorResponse'().
-export_type(['$msg_name'/0, '$msg'/0]).

-if(?OTP_RELEASE >= 24).
-dialyzer({no_underspecs, encode_msg/2}).
-endif.
-spec encode_msg('$msg'(), '$msg_name'()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) -> encode_msg(Msg, MsgName, []).

-if(?OTP_RELEASE >= 24).
-dialyzer({no_underspecs, encode_msg/3}).
-endif.
-spec encode_msg('$msg'(), '$msg_name'(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
        true -> verify_msg(Msg, MsgName, Opts);
        false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        'grpc.reflection.v1alpha.ServerReflectionRequest' -> 'encode_msg_grpc.reflection.v1alpha.ServerReflectionRequest'(id(Msg, TrUserData), TrUserData);
        'grpc.reflection.v1alpha.ExtensionRequest' -> 'encode_msg_grpc.reflection.v1alpha.ExtensionRequest'(id(Msg, TrUserData), TrUserData);
        'grpc.reflection.v1alpha.ServerReflectionResponse' -> 'encode_msg_grpc.reflection.v1alpha.ServerReflectionResponse'(id(Msg, TrUserData), TrUserData);
        'grpc.reflection.v1alpha.FileDescriptorResponse' -> 'encode_msg_grpc.reflection.v1alpha.FileDescriptorResponse'(id(Msg, TrUserData), TrUserData);
        'grpc.reflection.v1alpha.ExtensionNumberResponse' -> 'encode_msg_grpc.reflection.v1alpha.ExtensionNumberResponse'(id(Msg, TrUserData), TrUserData);
        'grpc.reflection.v1alpha.ListServiceResponse' -> 'encode_msg_grpc.reflection.v1alpha.ListServiceResponse'(id(Msg, TrUserData), TrUserData);
        'grpc.reflection.v1alpha.ServiceResponse' -> 'encode_msg_grpc.reflection.v1alpha.ServiceResponse'(id(Msg, TrUserData), TrUserData);
        'grpc.reflection.v1alpha.ErrorResponse' -> 'encode_msg_grpc.reflection.v1alpha.ErrorResponse'(id(Msg, TrUserData), TrUserData)
    end.


'encode_msg_grpc.reflection.v1alpha.ServerReflectionRequest'(Msg, TrUserData) -> 'encode_msg_grpc.reflection.v1alpha.ServerReflectionRequest'(Msg, <<>>, TrUserData).


'encode_msg_grpc.reflection.v1alpha.ServerReflectionRequest'(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{host := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case is_empty_string(TrF1) of
                         true -> Bin;
                         false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    case M of
        #{message_request := F2} ->
            case id(F2, TrUserData) of
                {file_by_filename, TF2} -> begin TrTF2 = id(TF2, TrUserData), e_type_string(TrTF2, <<B1/binary, 26>>, TrUserData) end;
                {file_containing_symbol, TF2} -> begin TrTF2 = id(TF2, TrUserData), e_type_string(TrTF2, <<B1/binary, 34>>, TrUserData) end;
                {file_containing_extension, TF2} -> begin TrTF2 = id(TF2, TrUserData), 'e_mfield_grpc.reflection.v1alpha.ServerReflectionRequest_file_containing_extension'(TrTF2, <<B1/binary, 42>>, TrUserData) end;
                {all_extension_numbers_of_type, TF2} -> begin TrTF2 = id(TF2, TrUserData), e_type_string(TrTF2, <<B1/binary, 50>>, TrUserData) end;
                {list_services, TF2} -> begin TrTF2 = id(TF2, TrUserData), e_type_string(TrTF2, <<B1/binary, 58>>, TrUserData) end
            end;
        _ -> B1
    end.

'encode_msg_grpc.reflection.v1alpha.ExtensionRequest'(Msg, TrUserData) -> 'encode_msg_grpc.reflection.v1alpha.ExtensionRequest'(Msg, <<>>, TrUserData).


'encode_msg_grpc.reflection.v1alpha.ExtensionRequest'(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{containing_type := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case is_empty_string(TrF1) of
                         true -> Bin;
                         false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    case M of
        #{extension_number := F2} ->
            begin
                TrF2 = id(F2, TrUserData),
                if TrF2 =:= 0 -> B1;
                   true -> e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
                end
            end;
        _ -> B1
    end.

'encode_msg_grpc.reflection.v1alpha.ServerReflectionResponse'(Msg, TrUserData) -> 'encode_msg_grpc.reflection.v1alpha.ServerReflectionResponse'(Msg, <<>>, TrUserData).


'encode_msg_grpc.reflection.v1alpha.ServerReflectionResponse'(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{valid_host := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case is_empty_string(TrF1) of
                         true -> Bin;
                         false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    B2 = case M of
             #{original_request := F2} ->
                 begin
                     TrF2 = id(F2, TrUserData),
                     if TrF2 =:= undefined -> B1;
                        true -> 'e_mfield_grpc.reflection.v1alpha.ServerReflectionResponse_original_request'(TrF2, <<B1/binary, 18>>, TrUserData)
                     end
                 end;
             _ -> B1
         end,
    case M of
        #{message_response := F3} ->
            case id(F3, TrUserData) of
                {file_descriptor_response, TF3} -> begin TrTF3 = id(TF3, TrUserData), 'e_mfield_grpc.reflection.v1alpha.ServerReflectionResponse_file_descriptor_response'(TrTF3, <<B2/binary, 34>>, TrUserData) end;
                {all_extension_numbers_response, TF3} -> begin TrTF3 = id(TF3, TrUserData), 'e_mfield_grpc.reflection.v1alpha.ServerReflectionResponse_all_extension_numbers_response'(TrTF3, <<B2/binary, 42>>, TrUserData) end;
                {list_services_response, TF3} -> begin TrTF3 = id(TF3, TrUserData), 'e_mfield_grpc.reflection.v1alpha.ServerReflectionResponse_list_services_response'(TrTF3, <<B2/binary, 50>>, TrUserData) end;
                {error_response, TF3} -> begin TrTF3 = id(TF3, TrUserData), 'e_mfield_grpc.reflection.v1alpha.ServerReflectionResponse_error_response'(TrTF3, <<B2/binary, 58>>, TrUserData) end
            end;
        _ -> B2
    end.

'encode_msg_grpc.reflection.v1alpha.FileDescriptorResponse'(Msg, TrUserData) -> 'encode_msg_grpc.reflection.v1alpha.FileDescriptorResponse'(Msg, <<>>, TrUserData).


'encode_msg_grpc.reflection.v1alpha.FileDescriptorResponse'(#{} = M, Bin, TrUserData) ->
    case M of
        #{file_descriptor_proto := F1} ->
            TrF1 = id(F1, TrUserData),
            if TrF1 == [] -> Bin;
               true -> 'e_field_grpc.reflection.v1alpha.FileDescriptorResponse_file_descriptor_proto'(TrF1, Bin, TrUserData)
            end;
        _ -> Bin
    end.

'encode_msg_grpc.reflection.v1alpha.ExtensionNumberResponse'(Msg, TrUserData) -> 'encode_msg_grpc.reflection.v1alpha.ExtensionNumberResponse'(Msg, <<>>, TrUserData).


'encode_msg_grpc.reflection.v1alpha.ExtensionNumberResponse'(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{base_type_name := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case is_empty_string(TrF1) of
                         true -> Bin;
                         false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    case M of
        #{extension_number := F2} ->
            TrF2 = id(F2, TrUserData),
            if TrF2 == [] -> B1;
               true -> 'e_field_grpc.reflection.v1alpha.ExtensionNumberResponse_extension_number'(TrF2, B1, TrUserData)
            end;
        _ -> B1
    end.

'encode_msg_grpc.reflection.v1alpha.ListServiceResponse'(Msg, TrUserData) -> 'encode_msg_grpc.reflection.v1alpha.ListServiceResponse'(Msg, <<>>, TrUserData).


'encode_msg_grpc.reflection.v1alpha.ListServiceResponse'(#{} = M, Bin, TrUserData) ->
    case M of
        #{service := F1} ->
            TrF1 = id(F1, TrUserData),
            if TrF1 == [] -> Bin;
               true -> 'e_field_grpc.reflection.v1alpha.ListServiceResponse_service'(TrF1, Bin, TrUserData)
            end;
        _ -> Bin
    end.

'encode_msg_grpc.reflection.v1alpha.ServiceResponse'(Msg, TrUserData) -> 'encode_msg_grpc.reflection.v1alpha.ServiceResponse'(Msg, <<>>, TrUserData).


'encode_msg_grpc.reflection.v1alpha.ServiceResponse'(#{} = M, Bin, TrUserData) ->
    case M of
        #{name := F1} ->
            begin
                TrF1 = id(F1, TrUserData),
                case is_empty_string(TrF1) of
                    true -> Bin;
                    false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                end
            end;
        _ -> Bin
    end.

'encode_msg_grpc.reflection.v1alpha.ErrorResponse'(Msg, TrUserData) -> 'encode_msg_grpc.reflection.v1alpha.ErrorResponse'(Msg, <<>>, TrUserData).


'encode_msg_grpc.reflection.v1alpha.ErrorResponse'(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{error_code := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     if TrF1 =:= 0 -> Bin;
                        true -> e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    case M of
        #{error_message := F2} ->
            begin
                TrF2 = id(F2, TrUserData),
                case is_empty_string(TrF2) of
                    true -> B1;
                    false -> e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
                end
            end;
        _ -> B1
    end.

'e_mfield_grpc.reflection.v1alpha.ServerReflectionRequest_file_containing_extension'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_grpc.reflection.v1alpha.ExtensionRequest'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_grpc.reflection.v1alpha.ServerReflectionResponse_original_request'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_grpc.reflection.v1alpha.ServerReflectionRequest'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_grpc.reflection.v1alpha.ServerReflectionResponse_file_descriptor_response'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_grpc.reflection.v1alpha.FileDescriptorResponse'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_grpc.reflection.v1alpha.ServerReflectionResponse_all_extension_numbers_response'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_grpc.reflection.v1alpha.ExtensionNumberResponse'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_grpc.reflection.v1alpha.ServerReflectionResponse_list_services_response'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_grpc.reflection.v1alpha.ListServiceResponse'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_grpc.reflection.v1alpha.ServerReflectionResponse_error_response'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_grpc.reflection.v1alpha.ErrorResponse'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_grpc.reflection.v1alpha.FileDescriptorResponse_file_descriptor_proto'([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_type_bytes(id(Elem, TrUserData), Bin2, TrUserData),
    'e_field_grpc.reflection.v1alpha.FileDescriptorResponse_file_descriptor_proto'(Rest, Bin3, TrUserData);
'e_field_grpc.reflection.v1alpha.FileDescriptorResponse_file_descriptor_proto'([], Bin, _TrUserData) -> Bin.

'e_field_grpc.reflection.v1alpha.ExtensionNumberResponse_extension_number'(Elems, Bin, TrUserData) when Elems =/= [] ->
    SubBin = 'e_pfield_grpc.reflection.v1alpha.ExtensionNumberResponse_extension_number'(Elems, <<>>, TrUserData),
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_varint(byte_size(SubBin), Bin2),
    <<Bin3/binary, SubBin/binary>>;
'e_field_grpc.reflection.v1alpha.ExtensionNumberResponse_extension_number'([], Bin, _TrUserData) -> Bin.

'e_pfield_grpc.reflection.v1alpha.ExtensionNumberResponse_extension_number'([Value | Rest], Bin, TrUserData) ->
    Bin2 = e_type_int32(id(Value, TrUserData), Bin, TrUserData),
    'e_pfield_grpc.reflection.v1alpha.ExtensionNumberResponse_extension_number'(Rest, Bin2, TrUserData);
'e_pfield_grpc.reflection.v1alpha.ExtensionNumberResponse_extension_number'([], Bin, _TrUserData) -> Bin.

'e_mfield_grpc.reflection.v1alpha.ListServiceResponse_service'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_grpc.reflection.v1alpha.ServiceResponse'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_grpc.reflection.v1alpha.ListServiceResponse_service'([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = 'e_mfield_grpc.reflection.v1alpha.ListServiceResponse_service'(id(Elem, TrUserData), Bin2, TrUserData),
    'e_field_grpc.reflection.v1alpha.ListServiceResponse_service'(Rest, Bin3, TrUserData);
'e_field_grpc.reflection.v1alpha.ListServiceResponse_service'([], Bin, _TrUserData) -> Bin.

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 -> e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) -> e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 -> <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 -> <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) -> <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData) when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData) when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) -> <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) -> <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) -> <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) -> <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) -> <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) -> <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) -> <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) -> <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) -> <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) -> <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) -> <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) -> <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_unknown_elems/2}).
e_unknown_elems([Elem | Rest], Bin) ->
    BinR = case Elem of
               {varint, FNum, N} ->
                   BinF = e_varint(FNum bsl 3, Bin),
                   e_varint(N, BinF);
               {length_delimited, FNum, Data} ->
                   BinF = e_varint(FNum bsl 3 bor 2, Bin),
                   BinL = e_varint(byte_size(Data), BinF),
                   <<BinL/binary, Data/binary>>;
               {group, FNum, GroupFields} ->
                   Bin1 = e_varint(FNum bsl 3 bor 3, Bin),
                   Bin2 = e_unknown_elems(GroupFields, Bin1),
                   e_varint(FNum bsl 3 bor 4, Bin2);
               {fixed32, FNum, V} ->
                   BinF = e_varint(FNum bsl 3 bor 5, Bin),
                   <<BinF/binary, V:32/little>>;
               {fixed64, FNum, V} ->
                   BinF = e_varint(FNum bsl 3 bor 1, Bin),
                   <<BinF/binary, V:64/little>>
           end,
    e_unknown_elems(Rest, BinR);
e_unknown_elems([], Bin) -> Bin.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).

is_empty_string("") -> true;
is_empty_string(<<>>) -> true;
is_empty_string(L) when is_list(L) -> not string_has_chars(L);
is_empty_string(B) when is_binary(B) -> false.

string_has_chars([C | _]) when is_integer(C) -> true;
string_has_chars([H | T]) ->
    case string_has_chars(H) of
        true -> true;
        false -> string_has_chars(T)
    end;
string_has_chars(B) when is_binary(B), byte_size(B) =/= 0 -> true;
string_has_chars(C) when is_integer(C) -> true;
string_has_chars(<<>>) -> false;
string_has_chars([]) -> false.


decode_msg(Bin, MsgName) when is_binary(Bin) -> decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch
        error:{gpb_error,_}=Reason:StackTrace ->
            erlang:raise(error, Reason, StackTrace);
        Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch
        error:{gpb_error,_}=Reason ->
            erlang:raise(error, Reason,
                         erlang:get_stacktrace());
        Class:Reason ->
            StackTrace = erlang:get_stacktrace(),
            error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit('grpc.reflection.v1alpha.ServerReflectionRequest', Bin, TrUserData) -> id('decode_msg_grpc.reflection.v1alpha.ServerReflectionRequest'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('grpc.reflection.v1alpha.ExtensionRequest', Bin, TrUserData) -> id('decode_msg_grpc.reflection.v1alpha.ExtensionRequest'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('grpc.reflection.v1alpha.ServerReflectionResponse', Bin, TrUserData) -> id('decode_msg_grpc.reflection.v1alpha.ServerReflectionResponse'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('grpc.reflection.v1alpha.FileDescriptorResponse', Bin, TrUserData) -> id('decode_msg_grpc.reflection.v1alpha.FileDescriptorResponse'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('grpc.reflection.v1alpha.ExtensionNumberResponse', Bin, TrUserData) -> id('decode_msg_grpc.reflection.v1alpha.ExtensionNumberResponse'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('grpc.reflection.v1alpha.ListServiceResponse', Bin, TrUserData) -> id('decode_msg_grpc.reflection.v1alpha.ListServiceResponse'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('grpc.reflection.v1alpha.ServiceResponse', Bin, TrUserData) -> id('decode_msg_grpc.reflection.v1alpha.ServiceResponse'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('grpc.reflection.v1alpha.ErrorResponse', Bin, TrUserData) -> id('decode_msg_grpc.reflection.v1alpha.ErrorResponse'(Bin, TrUserData), TrUserData).



'decode_msg_grpc.reflection.v1alpha.ServerReflectionRequest'(Bin, TrUserData) -> 'dfp_read_field_def_grpc.reflection.v1alpha.ServerReflectionRequest'(Bin, 0, 0, 0, id(<<>>, TrUserData), id('$undef', TrUserData), TrUserData).

'dfp_read_field_def_grpc.reflection.v1alpha.ServerReflectionRequest'(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'd_field_grpc.reflection.v1alpha.ServerReflectionRequest_host'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_grpc.reflection.v1alpha.ServerReflectionRequest'(<<26, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'd_field_grpc.reflection.v1alpha.ServerReflectionRequest_file_by_filename'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_grpc.reflection.v1alpha.ServerReflectionRequest'(<<34, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'd_field_grpc.reflection.v1alpha.ServerReflectionRequest_file_containing_symbol'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_grpc.reflection.v1alpha.ServerReflectionRequest'(<<42, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'd_field_grpc.reflection.v1alpha.ServerReflectionRequest_file_containing_extension'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_grpc.reflection.v1alpha.ServerReflectionRequest'(<<50, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'd_field_grpc.reflection.v1alpha.ServerReflectionRequest_all_extension_numbers_of_type'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_grpc.reflection.v1alpha.ServerReflectionRequest'(<<58, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'd_field_grpc.reflection.v1alpha.ServerReflectionRequest_list_services'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_grpc.reflection.v1alpha.ServerReflectionRequest'(<<>>, 0, 0, _, F@_1, F@_2, _) ->
    S1 = #{host => F@_1},
    if F@_2 == '$undef' -> S1;
       true -> S1#{message_request => F@_2}
    end;
'dfp_read_field_def_grpc.reflection.v1alpha.ServerReflectionRequest'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dg_read_field_def_grpc.reflection.v1alpha.ServerReflectionRequest'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

'dg_read_field_def_grpc.reflection.v1alpha.ServerReflectionRequest'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 ->
    'dg_read_field_def_grpc.reflection.v1alpha.ServerReflectionRequest'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'dg_read_field_def_grpc.reflection.v1alpha.ServerReflectionRequest'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> 'd_field_grpc.reflection.v1alpha.ServerReflectionRequest_host'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        26 -> 'd_field_grpc.reflection.v1alpha.ServerReflectionRequest_file_by_filename'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        34 -> 'd_field_grpc.reflection.v1alpha.ServerReflectionRequest_file_containing_symbol'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        42 -> 'd_field_grpc.reflection.v1alpha.ServerReflectionRequest_file_containing_extension'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        50 -> 'd_field_grpc.reflection.v1alpha.ServerReflectionRequest_all_extension_numbers_of_type'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        58 -> 'd_field_grpc.reflection.v1alpha.ServerReflectionRequest_list_services'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> 'skip_varint_grpc.reflection.v1alpha.ServerReflectionRequest'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> 'skip_64_grpc.reflection.v1alpha.ServerReflectionRequest'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> 'skip_length_delimited_grpc.reflection.v1alpha.ServerReflectionRequest'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> 'skip_group_grpc.reflection.v1alpha.ServerReflectionRequest'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> 'skip_32_grpc.reflection.v1alpha.ServerReflectionRequest'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
'dg_read_field_def_grpc.reflection.v1alpha.ServerReflectionRequest'(<<>>, 0, 0, _, F@_1, F@_2, _) ->
    S1 = #{host => F@_1},
    if F@_2 == '$undef' -> S1;
       true -> S1#{message_request => F@_2}
    end.

'd_field_grpc.reflection.v1alpha.ServerReflectionRequest_host'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 ->
    'd_field_grpc.reflection.v1alpha.ServerReflectionRequest_host'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'd_field_grpc.reflection.v1alpha.ServerReflectionRequest_host'(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    'dfp_read_field_def_grpc.reflection.v1alpha.ServerReflectionRequest'(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

'd_field_grpc.reflection.v1alpha.ServerReflectionRequest_file_by_filename'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 ->
    'd_field_grpc.reflection.v1alpha.ServerReflectionRequest_file_by_filename'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'd_field_grpc.reflection.v1alpha.ServerReflectionRequest_file_by_filename'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    'dfp_read_field_def_grpc.reflection.v1alpha.ServerReflectionRequest'(RestF, 0, 0, F, F@_1, id({file_by_filename, NewFValue}, TrUserData), TrUserData).

'd_field_grpc.reflection.v1alpha.ServerReflectionRequest_file_containing_symbol'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 ->
    'd_field_grpc.reflection.v1alpha.ServerReflectionRequest_file_containing_symbol'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'd_field_grpc.reflection.v1alpha.ServerReflectionRequest_file_containing_symbol'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    'dfp_read_field_def_grpc.reflection.v1alpha.ServerReflectionRequest'(RestF, 0, 0, F, F@_1, id({file_containing_symbol, NewFValue}, TrUserData), TrUserData).

'd_field_grpc.reflection.v1alpha.ServerReflectionRequest_file_containing_extension'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 ->
    'd_field_grpc.reflection.v1alpha.ServerReflectionRequest_file_containing_extension'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'd_field_grpc.reflection.v1alpha.ServerReflectionRequest_file_containing_extension'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id('decode_msg_grpc.reflection.v1alpha.ExtensionRequest'(Bs, TrUserData), TrUserData), Rest2} end,
    'dfp_read_field_def_grpc.reflection.v1alpha.ServerReflectionRequest'(RestF,
                                                                         0,
                                                                         0,
                                                                         F,
                                                                         F@_1,
                                                                         case Prev of
                                                                             '$undef' -> id({file_containing_extension, NewFValue}, TrUserData);
                                                                             {file_containing_extension, MVPrev} -> id({file_containing_extension, 'merge_msg_grpc.reflection.v1alpha.ExtensionRequest'(MVPrev, NewFValue, TrUserData)}, TrUserData);
                                                                             _ -> id({file_containing_extension, NewFValue}, TrUserData)
                                                                         end,
                                                                         TrUserData).

'd_field_grpc.reflection.v1alpha.ServerReflectionRequest_all_extension_numbers_of_type'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 ->
    'd_field_grpc.reflection.v1alpha.ServerReflectionRequest_all_extension_numbers_of_type'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'd_field_grpc.reflection.v1alpha.ServerReflectionRequest_all_extension_numbers_of_type'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    'dfp_read_field_def_grpc.reflection.v1alpha.ServerReflectionRequest'(RestF, 0, 0, F, F@_1, id({all_extension_numbers_of_type, NewFValue}, TrUserData), TrUserData).

'd_field_grpc.reflection.v1alpha.ServerReflectionRequest_list_services'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 ->
    'd_field_grpc.reflection.v1alpha.ServerReflectionRequest_list_services'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'd_field_grpc.reflection.v1alpha.ServerReflectionRequest_list_services'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    'dfp_read_field_def_grpc.reflection.v1alpha.ServerReflectionRequest'(RestF, 0, 0, F, F@_1, id({list_services, NewFValue}, TrUserData), TrUserData).

'skip_varint_grpc.reflection.v1alpha.ServerReflectionRequest'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'skip_varint_grpc.reflection.v1alpha.ServerReflectionRequest'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'skip_varint_grpc.reflection.v1alpha.ServerReflectionRequest'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dfp_read_field_def_grpc.reflection.v1alpha.ServerReflectionRequest'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_length_delimited_grpc.reflection.v1alpha.ServerReflectionRequest'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 ->
    'skip_length_delimited_grpc.reflection.v1alpha.ServerReflectionRequest'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'skip_length_delimited_grpc.reflection.v1alpha.ServerReflectionRequest'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_grpc.reflection.v1alpha.ServerReflectionRequest'(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

'skip_group_grpc.reflection.v1alpha.ServerReflectionRequest'(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_grpc.reflection.v1alpha.ServerReflectionRequest'(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

'skip_32_grpc.reflection.v1alpha.ServerReflectionRequest'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dfp_read_field_def_grpc.reflection.v1alpha.ServerReflectionRequest'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_64_grpc.reflection.v1alpha.ServerReflectionRequest'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dfp_read_field_def_grpc.reflection.v1alpha.ServerReflectionRequest'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'decode_msg_grpc.reflection.v1alpha.ExtensionRequest'(Bin, TrUserData) -> 'dfp_read_field_def_grpc.reflection.v1alpha.ExtensionRequest'(Bin, 0, 0, 0, id(<<>>, TrUserData), id(0, TrUserData), TrUserData).

'dfp_read_field_def_grpc.reflection.v1alpha.ExtensionRequest'(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'd_field_grpc.reflection.v1alpha.ExtensionRequest_containing_type'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_grpc.reflection.v1alpha.ExtensionRequest'(<<16, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'd_field_grpc.reflection.v1alpha.ExtensionRequest_extension_number'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_grpc.reflection.v1alpha.ExtensionRequest'(<<>>, 0, 0, _, F@_1, F@_2, _) -> #{containing_type => F@_1, extension_number => F@_2};
'dfp_read_field_def_grpc.reflection.v1alpha.ExtensionRequest'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dg_read_field_def_grpc.reflection.v1alpha.ExtensionRequest'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

'dg_read_field_def_grpc.reflection.v1alpha.ExtensionRequest'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 ->
    'dg_read_field_def_grpc.reflection.v1alpha.ExtensionRequest'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'dg_read_field_def_grpc.reflection.v1alpha.ExtensionRequest'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> 'd_field_grpc.reflection.v1alpha.ExtensionRequest_containing_type'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        16 -> 'd_field_grpc.reflection.v1alpha.ExtensionRequest_extension_number'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> 'skip_varint_grpc.reflection.v1alpha.ExtensionRequest'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> 'skip_64_grpc.reflection.v1alpha.ExtensionRequest'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> 'skip_length_delimited_grpc.reflection.v1alpha.ExtensionRequest'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> 'skip_group_grpc.reflection.v1alpha.ExtensionRequest'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> 'skip_32_grpc.reflection.v1alpha.ExtensionRequest'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
'dg_read_field_def_grpc.reflection.v1alpha.ExtensionRequest'(<<>>, 0, 0, _, F@_1, F@_2, _) -> #{containing_type => F@_1, extension_number => F@_2}.

'd_field_grpc.reflection.v1alpha.ExtensionRequest_containing_type'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 ->
    'd_field_grpc.reflection.v1alpha.ExtensionRequest_containing_type'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'd_field_grpc.reflection.v1alpha.ExtensionRequest_containing_type'(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    'dfp_read_field_def_grpc.reflection.v1alpha.ExtensionRequest'(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

'd_field_grpc.reflection.v1alpha.ExtensionRequest_extension_number'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 ->
    'd_field_grpc.reflection.v1alpha.ExtensionRequest_extension_number'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'd_field_grpc.reflection.v1alpha.ExtensionRequest_extension_number'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end, Rest},
    'dfp_read_field_def_grpc.reflection.v1alpha.ExtensionRequest'(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

'skip_varint_grpc.reflection.v1alpha.ExtensionRequest'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'skip_varint_grpc.reflection.v1alpha.ExtensionRequest'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'skip_varint_grpc.reflection.v1alpha.ExtensionRequest'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dfp_read_field_def_grpc.reflection.v1alpha.ExtensionRequest'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_length_delimited_grpc.reflection.v1alpha.ExtensionRequest'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 ->
    'skip_length_delimited_grpc.reflection.v1alpha.ExtensionRequest'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'skip_length_delimited_grpc.reflection.v1alpha.ExtensionRequest'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_grpc.reflection.v1alpha.ExtensionRequest'(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

'skip_group_grpc.reflection.v1alpha.ExtensionRequest'(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_grpc.reflection.v1alpha.ExtensionRequest'(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

'skip_32_grpc.reflection.v1alpha.ExtensionRequest'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dfp_read_field_def_grpc.reflection.v1alpha.ExtensionRequest'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_64_grpc.reflection.v1alpha.ExtensionRequest'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dfp_read_field_def_grpc.reflection.v1alpha.ExtensionRequest'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'decode_msg_grpc.reflection.v1alpha.ServerReflectionResponse'(Bin, TrUserData) ->
    'dfp_read_field_def_grpc.reflection.v1alpha.ServerReflectionResponse'(Bin, 0, 0, 0, id(<<>>, TrUserData), id('$undef', TrUserData), id('$undef', TrUserData), TrUserData).

'dfp_read_field_def_grpc.reflection.v1alpha.ServerReflectionResponse'(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) ->
    'd_field_grpc.reflection.v1alpha.ServerReflectionResponse_valid_host'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_grpc.reflection.v1alpha.ServerReflectionResponse'(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) ->
    'd_field_grpc.reflection.v1alpha.ServerReflectionResponse_original_request'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_grpc.reflection.v1alpha.ServerReflectionResponse'(<<34, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) ->
    'd_field_grpc.reflection.v1alpha.ServerReflectionResponse_file_descriptor_response'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_grpc.reflection.v1alpha.ServerReflectionResponse'(<<42, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) ->
    'd_field_grpc.reflection.v1alpha.ServerReflectionResponse_all_extension_numbers_response'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_grpc.reflection.v1alpha.ServerReflectionResponse'(<<50, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) ->
    'd_field_grpc.reflection.v1alpha.ServerReflectionResponse_list_services_response'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_grpc.reflection.v1alpha.ServerReflectionResponse'(<<58, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) ->
    'd_field_grpc.reflection.v1alpha.ServerReflectionResponse_error_response'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_grpc.reflection.v1alpha.ServerReflectionResponse'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) ->
    S1 = #{valid_host => F@_1},
    S2 = if F@_2 == '$undef' -> S1;
            true -> S1#{original_request => F@_2}
         end,
    if F@_3 == '$undef' -> S2;
       true -> S2#{message_response => F@_3}
    end;
'dfp_read_field_def_grpc.reflection.v1alpha.ServerReflectionResponse'(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> 'dg_read_field_def_grpc.reflection.v1alpha.ServerReflectionResponse'(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

'dg_read_field_def_grpc.reflection.v1alpha.ServerReflectionResponse'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 32 - 7 ->
    'dg_read_field_def_grpc.reflection.v1alpha.ServerReflectionResponse'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
'dg_read_field_def_grpc.reflection.v1alpha.ServerReflectionResponse'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> 'd_field_grpc.reflection.v1alpha.ServerReflectionResponse_valid_host'(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        18 -> 'd_field_grpc.reflection.v1alpha.ServerReflectionResponse_original_request'(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        34 -> 'd_field_grpc.reflection.v1alpha.ServerReflectionResponse_file_descriptor_response'(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        42 -> 'd_field_grpc.reflection.v1alpha.ServerReflectionResponse_all_extension_numbers_response'(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        50 -> 'd_field_grpc.reflection.v1alpha.ServerReflectionResponse_list_services_response'(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        58 -> 'd_field_grpc.reflection.v1alpha.ServerReflectionResponse_error_response'(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        _ ->
            case Key band 7 of
                0 -> 'skip_varint_grpc.reflection.v1alpha.ServerReflectionResponse'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                1 -> 'skip_64_grpc.reflection.v1alpha.ServerReflectionResponse'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                2 -> 'skip_length_delimited_grpc.reflection.v1alpha.ServerReflectionResponse'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                3 -> 'skip_group_grpc.reflection.v1alpha.ServerReflectionResponse'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                5 -> 'skip_32_grpc.reflection.v1alpha.ServerReflectionResponse'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData)
            end
    end;
'dg_read_field_def_grpc.reflection.v1alpha.ServerReflectionResponse'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) ->
    S1 = #{valid_host => F@_1},
    S2 = if F@_2 == '$undef' -> S1;
            true -> S1#{original_request => F@_2}
         end,
    if F@_3 == '$undef' -> S2;
       true -> S2#{message_response => F@_3}
    end.

'd_field_grpc.reflection.v1alpha.ServerReflectionResponse_valid_host'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 ->
    'd_field_grpc.reflection.v1alpha.ServerReflectionResponse_valid_host'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
'd_field_grpc.reflection.v1alpha.ServerReflectionResponse_valid_host'(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    'dfp_read_field_def_grpc.reflection.v1alpha.ServerReflectionResponse'(RestF, 0, 0, F, NewFValue, F@_2, F@_3, TrUserData).

'd_field_grpc.reflection.v1alpha.ServerReflectionResponse_original_request'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 ->
    'd_field_grpc.reflection.v1alpha.ServerReflectionResponse_original_request'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
'd_field_grpc.reflection.v1alpha.ServerReflectionResponse_original_request'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, Prev, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id('decode_msg_grpc.reflection.v1alpha.ServerReflectionRequest'(Bs, TrUserData), TrUserData), Rest2} end,
    'dfp_read_field_def_grpc.reflection.v1alpha.ServerReflectionResponse'(RestF,
                                                                          0,
                                                                          0,
                                                                          F,
                                                                          F@_1,
                                                                          if Prev == '$undef' -> NewFValue;
                                                                             true -> 'merge_msg_grpc.reflection.v1alpha.ServerReflectionRequest'(Prev, NewFValue, TrUserData)
                                                                          end,
                                                                          F@_3,
                                                                          TrUserData).

'd_field_grpc.reflection.v1alpha.ServerReflectionResponse_file_descriptor_response'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 ->
    'd_field_grpc.reflection.v1alpha.ServerReflectionResponse_file_descriptor_response'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
'd_field_grpc.reflection.v1alpha.ServerReflectionResponse_file_descriptor_response'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id('decode_msg_grpc.reflection.v1alpha.FileDescriptorResponse'(Bs, TrUserData), TrUserData), Rest2} end,
    'dfp_read_field_def_grpc.reflection.v1alpha.ServerReflectionResponse'(RestF,
                                                                          0,
                                                                          0,
                                                                          F,
                                                                          F@_1,
                                                                          F@_2,
                                                                          case Prev of
                                                                              '$undef' -> id({file_descriptor_response, NewFValue}, TrUserData);
                                                                              {file_descriptor_response, MVPrev} -> id({file_descriptor_response, 'merge_msg_grpc.reflection.v1alpha.FileDescriptorResponse'(MVPrev, NewFValue, TrUserData)}, TrUserData);
                                                                              _ -> id({file_descriptor_response, NewFValue}, TrUserData)
                                                                          end,
                                                                          TrUserData).

'd_field_grpc.reflection.v1alpha.ServerReflectionResponse_all_extension_numbers_response'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 ->
    'd_field_grpc.reflection.v1alpha.ServerReflectionResponse_all_extension_numbers_response'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
'd_field_grpc.reflection.v1alpha.ServerReflectionResponse_all_extension_numbers_response'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id('decode_msg_grpc.reflection.v1alpha.ExtensionNumberResponse'(Bs, TrUserData), TrUserData), Rest2} end,
    'dfp_read_field_def_grpc.reflection.v1alpha.ServerReflectionResponse'(RestF,
                                                                          0,
                                                                          0,
                                                                          F,
                                                                          F@_1,
                                                                          F@_2,
                                                                          case Prev of
                                                                              '$undef' -> id({all_extension_numbers_response, NewFValue}, TrUserData);
                                                                              {all_extension_numbers_response, MVPrev} -> id({all_extension_numbers_response, 'merge_msg_grpc.reflection.v1alpha.ExtensionNumberResponse'(MVPrev, NewFValue, TrUserData)}, TrUserData);
                                                                              _ -> id({all_extension_numbers_response, NewFValue}, TrUserData)
                                                                          end,
                                                                          TrUserData).

'd_field_grpc.reflection.v1alpha.ServerReflectionResponse_list_services_response'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 ->
    'd_field_grpc.reflection.v1alpha.ServerReflectionResponse_list_services_response'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
'd_field_grpc.reflection.v1alpha.ServerReflectionResponse_list_services_response'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id('decode_msg_grpc.reflection.v1alpha.ListServiceResponse'(Bs, TrUserData), TrUserData), Rest2} end,
    'dfp_read_field_def_grpc.reflection.v1alpha.ServerReflectionResponse'(RestF,
                                                                          0,
                                                                          0,
                                                                          F,
                                                                          F@_1,
                                                                          F@_2,
                                                                          case Prev of
                                                                              '$undef' -> id({list_services_response, NewFValue}, TrUserData);
                                                                              {list_services_response, MVPrev} -> id({list_services_response, 'merge_msg_grpc.reflection.v1alpha.ListServiceResponse'(MVPrev, NewFValue, TrUserData)}, TrUserData);
                                                                              _ -> id({list_services_response, NewFValue}, TrUserData)
                                                                          end,
                                                                          TrUserData).

'd_field_grpc.reflection.v1alpha.ServerReflectionResponse_error_response'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 ->
    'd_field_grpc.reflection.v1alpha.ServerReflectionResponse_error_response'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
'd_field_grpc.reflection.v1alpha.ServerReflectionResponse_error_response'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id('decode_msg_grpc.reflection.v1alpha.ErrorResponse'(Bs, TrUserData), TrUserData), Rest2} end,
    'dfp_read_field_def_grpc.reflection.v1alpha.ServerReflectionResponse'(RestF,
                                                                          0,
                                                                          0,
                                                                          F,
                                                                          F@_1,
                                                                          F@_2,
                                                                          case Prev of
                                                                              '$undef' -> id({error_response, NewFValue}, TrUserData);
                                                                              {error_response, MVPrev} -> id({error_response, 'merge_msg_grpc.reflection.v1alpha.ErrorResponse'(MVPrev, NewFValue, TrUserData)}, TrUserData);
                                                                              _ -> id({error_response, NewFValue}, TrUserData)
                                                                          end,
                                                                          TrUserData).

'skip_varint_grpc.reflection.v1alpha.ServerReflectionResponse'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> 'skip_varint_grpc.reflection.v1alpha.ServerReflectionResponse'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
'skip_varint_grpc.reflection.v1alpha.ServerReflectionResponse'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) ->
    'dfp_read_field_def_grpc.reflection.v1alpha.ServerReflectionResponse'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

'skip_length_delimited_grpc.reflection.v1alpha.ServerReflectionResponse'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 ->
    'skip_length_delimited_grpc.reflection.v1alpha.ServerReflectionResponse'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
'skip_length_delimited_grpc.reflection.v1alpha.ServerReflectionResponse'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_grpc.reflection.v1alpha.ServerReflectionResponse'(Rest2, 0, 0, F, F@_1, F@_2, F@_3, TrUserData).

'skip_group_grpc.reflection.v1alpha.ServerReflectionResponse'(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_grpc.reflection.v1alpha.ServerReflectionResponse'(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, TrUserData).

'skip_32_grpc.reflection.v1alpha.ServerReflectionResponse'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> 'dfp_read_field_def_grpc.reflection.v1alpha.ServerReflectionResponse'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

'skip_64_grpc.reflection.v1alpha.ServerReflectionResponse'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> 'dfp_read_field_def_grpc.reflection.v1alpha.ServerReflectionResponse'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

'decode_msg_grpc.reflection.v1alpha.FileDescriptorResponse'(Bin, TrUserData) -> 'dfp_read_field_def_grpc.reflection.v1alpha.FileDescriptorResponse'(Bin, 0, 0, 0, id([], TrUserData), TrUserData).

'dfp_read_field_def_grpc.reflection.v1alpha.FileDescriptorResponse'(<<10, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> 'd_field_grpc.reflection.v1alpha.FileDescriptorResponse_file_descriptor_proto'(Rest, Z1, Z2, F, F@_1, TrUserData);
'dfp_read_field_def_grpc.reflection.v1alpha.FileDescriptorResponse'(<<>>, 0, 0, _, R1, TrUserData) -> #{file_descriptor_proto => lists_reverse(R1, TrUserData)};
'dfp_read_field_def_grpc.reflection.v1alpha.FileDescriptorResponse'(Other, Z1, Z2, F, F@_1, TrUserData) -> 'dg_read_field_def_grpc.reflection.v1alpha.FileDescriptorResponse'(Other, Z1, Z2, F, F@_1, TrUserData).

'dg_read_field_def_grpc.reflection.v1alpha.FileDescriptorResponse'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 ->
    'dg_read_field_def_grpc.reflection.v1alpha.FileDescriptorResponse'(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
'dg_read_field_def_grpc.reflection.v1alpha.FileDescriptorResponse'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> 'd_field_grpc.reflection.v1alpha.FileDescriptorResponse_file_descriptor_proto'(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> 'skip_varint_grpc.reflection.v1alpha.FileDescriptorResponse'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> 'skip_64_grpc.reflection.v1alpha.FileDescriptorResponse'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> 'skip_length_delimited_grpc.reflection.v1alpha.FileDescriptorResponse'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> 'skip_group_grpc.reflection.v1alpha.FileDescriptorResponse'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> 'skip_32_grpc.reflection.v1alpha.FileDescriptorResponse'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
'dg_read_field_def_grpc.reflection.v1alpha.FileDescriptorResponse'(<<>>, 0, 0, _, R1, TrUserData) -> #{file_descriptor_proto => lists_reverse(R1, TrUserData)}.

'd_field_grpc.reflection.v1alpha.FileDescriptorResponse_file_descriptor_proto'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 ->
    'd_field_grpc.reflection.v1alpha.FileDescriptorResponse_file_descriptor_proto'(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
'd_field_grpc.reflection.v1alpha.FileDescriptorResponse_file_descriptor_proto'(<<0:1, X:7, Rest/binary>>, N, Acc, F, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    'dfp_read_field_def_grpc.reflection.v1alpha.FileDescriptorResponse'(RestF, 0, 0, F, cons(NewFValue, Prev, TrUserData), TrUserData).

'skip_varint_grpc.reflection.v1alpha.FileDescriptorResponse'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> 'skip_varint_grpc.reflection.v1alpha.FileDescriptorResponse'(Rest, Z1, Z2, F, F@_1, TrUserData);
'skip_varint_grpc.reflection.v1alpha.FileDescriptorResponse'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> 'dfp_read_field_def_grpc.reflection.v1alpha.FileDescriptorResponse'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_length_delimited_grpc.reflection.v1alpha.FileDescriptorResponse'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 ->
    'skip_length_delimited_grpc.reflection.v1alpha.FileDescriptorResponse'(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
'skip_length_delimited_grpc.reflection.v1alpha.FileDescriptorResponse'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_grpc.reflection.v1alpha.FileDescriptorResponse'(Rest2, 0, 0, F, F@_1, TrUserData).

'skip_group_grpc.reflection.v1alpha.FileDescriptorResponse'(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_grpc.reflection.v1alpha.FileDescriptorResponse'(Rest, 0, Z2, FNum, F@_1, TrUserData).

'skip_32_grpc.reflection.v1alpha.FileDescriptorResponse'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> 'dfp_read_field_def_grpc.reflection.v1alpha.FileDescriptorResponse'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_64_grpc.reflection.v1alpha.FileDescriptorResponse'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> 'dfp_read_field_def_grpc.reflection.v1alpha.FileDescriptorResponse'(Rest, Z1, Z2, F, F@_1, TrUserData).

'decode_msg_grpc.reflection.v1alpha.ExtensionNumberResponse'(Bin, TrUserData) -> 'dfp_read_field_def_grpc.reflection.v1alpha.ExtensionNumberResponse'(Bin, 0, 0, 0, id(<<>>, TrUserData), id([], TrUserData), TrUserData).

'dfp_read_field_def_grpc.reflection.v1alpha.ExtensionNumberResponse'(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'd_field_grpc.reflection.v1alpha.ExtensionNumberResponse_base_type_name'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_grpc.reflection.v1alpha.ExtensionNumberResponse'(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'd_pfield_grpc.reflection.v1alpha.ExtensionNumberResponse_extension_number'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_grpc.reflection.v1alpha.ExtensionNumberResponse'(<<16, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'd_field_grpc.reflection.v1alpha.ExtensionNumberResponse_extension_number'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_grpc.reflection.v1alpha.ExtensionNumberResponse'(<<>>, 0, 0, _, F@_1, R1, TrUserData) -> #{base_type_name => F@_1, extension_number => lists_reverse(R1, TrUserData)};
'dfp_read_field_def_grpc.reflection.v1alpha.ExtensionNumberResponse'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dg_read_field_def_grpc.reflection.v1alpha.ExtensionNumberResponse'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

'dg_read_field_def_grpc.reflection.v1alpha.ExtensionNumberResponse'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 ->
    'dg_read_field_def_grpc.reflection.v1alpha.ExtensionNumberResponse'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'dg_read_field_def_grpc.reflection.v1alpha.ExtensionNumberResponse'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> 'd_field_grpc.reflection.v1alpha.ExtensionNumberResponse_base_type_name'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        18 -> 'd_pfield_grpc.reflection.v1alpha.ExtensionNumberResponse_extension_number'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        16 -> 'd_field_grpc.reflection.v1alpha.ExtensionNumberResponse_extension_number'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> 'skip_varint_grpc.reflection.v1alpha.ExtensionNumberResponse'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> 'skip_64_grpc.reflection.v1alpha.ExtensionNumberResponse'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> 'skip_length_delimited_grpc.reflection.v1alpha.ExtensionNumberResponse'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> 'skip_group_grpc.reflection.v1alpha.ExtensionNumberResponse'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> 'skip_32_grpc.reflection.v1alpha.ExtensionNumberResponse'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
'dg_read_field_def_grpc.reflection.v1alpha.ExtensionNumberResponse'(<<>>, 0, 0, _, F@_1, R1, TrUserData) -> #{base_type_name => F@_1, extension_number => lists_reverse(R1, TrUserData)}.

'd_field_grpc.reflection.v1alpha.ExtensionNumberResponse_base_type_name'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 ->
    'd_field_grpc.reflection.v1alpha.ExtensionNumberResponse_base_type_name'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'd_field_grpc.reflection.v1alpha.ExtensionNumberResponse_base_type_name'(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    'dfp_read_field_def_grpc.reflection.v1alpha.ExtensionNumberResponse'(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

'd_field_grpc.reflection.v1alpha.ExtensionNumberResponse_extension_number'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 ->
    'd_field_grpc.reflection.v1alpha.ExtensionNumberResponse_extension_number'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'd_field_grpc.reflection.v1alpha.ExtensionNumberResponse_extension_number'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end, Rest},
    'dfp_read_field_def_grpc.reflection.v1alpha.ExtensionNumberResponse'(RestF, 0, 0, F, F@_1, cons(NewFValue, Prev, TrUserData), TrUserData).

'd_pfield_grpc.reflection.v1alpha.ExtensionNumberResponse_extension_number'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 ->
    'd_pfield_grpc.reflection.v1alpha.ExtensionNumberResponse_extension_number'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'd_pfield_grpc.reflection.v1alpha.ExtensionNumberResponse_extension_number'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, E, TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq = 'd_packed_field_grpc.reflection.v1alpha.ExtensionNumberResponse_extension_number'(PackedBytes, 0, 0, F, E, TrUserData),
    'dfp_read_field_def_grpc.reflection.v1alpha.ExtensionNumberResponse'(Rest2, 0, 0, F, F@_1, NewSeq, TrUserData).

'd_packed_field_grpc.reflection.v1alpha.ExtensionNumberResponse_extension_number'(<<1:1, X:7, Rest/binary>>, N, Acc, F, AccSeq, TrUserData) when N < 57 ->
    'd_packed_field_grpc.reflection.v1alpha.ExtensionNumberResponse_extension_number'(Rest, N + 7, X bsl N + Acc, F, AccSeq, TrUserData);
'd_packed_field_grpc.reflection.v1alpha.ExtensionNumberResponse_extension_number'(<<0:1, X:7, Rest/binary>>, N, Acc, F, AccSeq, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end, Rest},
    'd_packed_field_grpc.reflection.v1alpha.ExtensionNumberResponse_extension_number'(RestF, 0, 0, F, [NewFValue | AccSeq], TrUserData);
'd_packed_field_grpc.reflection.v1alpha.ExtensionNumberResponse_extension_number'(<<>>, 0, 0, _, AccSeq, _) -> AccSeq.

'skip_varint_grpc.reflection.v1alpha.ExtensionNumberResponse'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'skip_varint_grpc.reflection.v1alpha.ExtensionNumberResponse'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'skip_varint_grpc.reflection.v1alpha.ExtensionNumberResponse'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dfp_read_field_def_grpc.reflection.v1alpha.ExtensionNumberResponse'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_length_delimited_grpc.reflection.v1alpha.ExtensionNumberResponse'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 ->
    'skip_length_delimited_grpc.reflection.v1alpha.ExtensionNumberResponse'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'skip_length_delimited_grpc.reflection.v1alpha.ExtensionNumberResponse'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_grpc.reflection.v1alpha.ExtensionNumberResponse'(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

'skip_group_grpc.reflection.v1alpha.ExtensionNumberResponse'(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_grpc.reflection.v1alpha.ExtensionNumberResponse'(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

'skip_32_grpc.reflection.v1alpha.ExtensionNumberResponse'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dfp_read_field_def_grpc.reflection.v1alpha.ExtensionNumberResponse'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_64_grpc.reflection.v1alpha.ExtensionNumberResponse'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dfp_read_field_def_grpc.reflection.v1alpha.ExtensionNumberResponse'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'decode_msg_grpc.reflection.v1alpha.ListServiceResponse'(Bin, TrUserData) -> 'dfp_read_field_def_grpc.reflection.v1alpha.ListServiceResponse'(Bin, 0, 0, 0, id([], TrUserData), TrUserData).

'dfp_read_field_def_grpc.reflection.v1alpha.ListServiceResponse'(<<10, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> 'd_field_grpc.reflection.v1alpha.ListServiceResponse_service'(Rest, Z1, Z2, F, F@_1, TrUserData);
'dfp_read_field_def_grpc.reflection.v1alpha.ListServiceResponse'(<<>>, 0, 0, _, R1, TrUserData) ->
    S1 = #{},
    if R1 == '$undef' -> S1;
       true -> S1#{service => lists_reverse(R1, TrUserData)}
    end;
'dfp_read_field_def_grpc.reflection.v1alpha.ListServiceResponse'(Other, Z1, Z2, F, F@_1, TrUserData) -> 'dg_read_field_def_grpc.reflection.v1alpha.ListServiceResponse'(Other, Z1, Z2, F, F@_1, TrUserData).

'dg_read_field_def_grpc.reflection.v1alpha.ListServiceResponse'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 ->
    'dg_read_field_def_grpc.reflection.v1alpha.ListServiceResponse'(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
'dg_read_field_def_grpc.reflection.v1alpha.ListServiceResponse'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> 'd_field_grpc.reflection.v1alpha.ListServiceResponse_service'(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> 'skip_varint_grpc.reflection.v1alpha.ListServiceResponse'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> 'skip_64_grpc.reflection.v1alpha.ListServiceResponse'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> 'skip_length_delimited_grpc.reflection.v1alpha.ListServiceResponse'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> 'skip_group_grpc.reflection.v1alpha.ListServiceResponse'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> 'skip_32_grpc.reflection.v1alpha.ListServiceResponse'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
'dg_read_field_def_grpc.reflection.v1alpha.ListServiceResponse'(<<>>, 0, 0, _, R1, TrUserData) ->
    S1 = #{},
    if R1 == '$undef' -> S1;
       true -> S1#{service => lists_reverse(R1, TrUserData)}
    end.

'd_field_grpc.reflection.v1alpha.ListServiceResponse_service'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> 'd_field_grpc.reflection.v1alpha.ListServiceResponse_service'(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
'd_field_grpc.reflection.v1alpha.ListServiceResponse_service'(<<0:1, X:7, Rest/binary>>, N, Acc, F, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id('decode_msg_grpc.reflection.v1alpha.ServiceResponse'(Bs, TrUserData), TrUserData), Rest2} end,
    'dfp_read_field_def_grpc.reflection.v1alpha.ListServiceResponse'(RestF, 0, 0, F, cons(NewFValue, Prev, TrUserData), TrUserData).

'skip_varint_grpc.reflection.v1alpha.ListServiceResponse'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> 'skip_varint_grpc.reflection.v1alpha.ListServiceResponse'(Rest, Z1, Z2, F, F@_1, TrUserData);
'skip_varint_grpc.reflection.v1alpha.ListServiceResponse'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> 'dfp_read_field_def_grpc.reflection.v1alpha.ListServiceResponse'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_length_delimited_grpc.reflection.v1alpha.ListServiceResponse'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 ->
    'skip_length_delimited_grpc.reflection.v1alpha.ListServiceResponse'(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
'skip_length_delimited_grpc.reflection.v1alpha.ListServiceResponse'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_grpc.reflection.v1alpha.ListServiceResponse'(Rest2, 0, 0, F, F@_1, TrUserData).

'skip_group_grpc.reflection.v1alpha.ListServiceResponse'(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_grpc.reflection.v1alpha.ListServiceResponse'(Rest, 0, Z2, FNum, F@_1, TrUserData).

'skip_32_grpc.reflection.v1alpha.ListServiceResponse'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> 'dfp_read_field_def_grpc.reflection.v1alpha.ListServiceResponse'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_64_grpc.reflection.v1alpha.ListServiceResponse'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> 'dfp_read_field_def_grpc.reflection.v1alpha.ListServiceResponse'(Rest, Z1, Z2, F, F@_1, TrUserData).

'decode_msg_grpc.reflection.v1alpha.ServiceResponse'(Bin, TrUserData) -> 'dfp_read_field_def_grpc.reflection.v1alpha.ServiceResponse'(Bin, 0, 0, 0, id(<<>>, TrUserData), TrUserData).

'dfp_read_field_def_grpc.reflection.v1alpha.ServiceResponse'(<<10, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> 'd_field_grpc.reflection.v1alpha.ServiceResponse_name'(Rest, Z1, Z2, F, F@_1, TrUserData);
'dfp_read_field_def_grpc.reflection.v1alpha.ServiceResponse'(<<>>, 0, 0, _, F@_1, _) -> #{name => F@_1};
'dfp_read_field_def_grpc.reflection.v1alpha.ServiceResponse'(Other, Z1, Z2, F, F@_1, TrUserData) -> 'dg_read_field_def_grpc.reflection.v1alpha.ServiceResponse'(Other, Z1, Z2, F, F@_1, TrUserData).

'dg_read_field_def_grpc.reflection.v1alpha.ServiceResponse'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> 'dg_read_field_def_grpc.reflection.v1alpha.ServiceResponse'(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
'dg_read_field_def_grpc.reflection.v1alpha.ServiceResponse'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> 'd_field_grpc.reflection.v1alpha.ServiceResponse_name'(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> 'skip_varint_grpc.reflection.v1alpha.ServiceResponse'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> 'skip_64_grpc.reflection.v1alpha.ServiceResponse'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> 'skip_length_delimited_grpc.reflection.v1alpha.ServiceResponse'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> 'skip_group_grpc.reflection.v1alpha.ServiceResponse'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> 'skip_32_grpc.reflection.v1alpha.ServiceResponse'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
'dg_read_field_def_grpc.reflection.v1alpha.ServiceResponse'(<<>>, 0, 0, _, F@_1, _) -> #{name => F@_1}.

'd_field_grpc.reflection.v1alpha.ServiceResponse_name'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> 'd_field_grpc.reflection.v1alpha.ServiceResponse_name'(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
'd_field_grpc.reflection.v1alpha.ServiceResponse_name'(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    'dfp_read_field_def_grpc.reflection.v1alpha.ServiceResponse'(RestF, 0, 0, F, NewFValue, TrUserData).

'skip_varint_grpc.reflection.v1alpha.ServiceResponse'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> 'skip_varint_grpc.reflection.v1alpha.ServiceResponse'(Rest, Z1, Z2, F, F@_1, TrUserData);
'skip_varint_grpc.reflection.v1alpha.ServiceResponse'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> 'dfp_read_field_def_grpc.reflection.v1alpha.ServiceResponse'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_length_delimited_grpc.reflection.v1alpha.ServiceResponse'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> 'skip_length_delimited_grpc.reflection.v1alpha.ServiceResponse'(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
'skip_length_delimited_grpc.reflection.v1alpha.ServiceResponse'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_grpc.reflection.v1alpha.ServiceResponse'(Rest2, 0, 0, F, F@_1, TrUserData).

'skip_group_grpc.reflection.v1alpha.ServiceResponse'(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_grpc.reflection.v1alpha.ServiceResponse'(Rest, 0, Z2, FNum, F@_1, TrUserData).

'skip_32_grpc.reflection.v1alpha.ServiceResponse'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> 'dfp_read_field_def_grpc.reflection.v1alpha.ServiceResponse'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_64_grpc.reflection.v1alpha.ServiceResponse'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> 'dfp_read_field_def_grpc.reflection.v1alpha.ServiceResponse'(Rest, Z1, Z2, F, F@_1, TrUserData).

'decode_msg_grpc.reflection.v1alpha.ErrorResponse'(Bin, TrUserData) -> 'dfp_read_field_def_grpc.reflection.v1alpha.ErrorResponse'(Bin, 0, 0, 0, id(0, TrUserData), id(<<>>, TrUserData), TrUserData).

'dfp_read_field_def_grpc.reflection.v1alpha.ErrorResponse'(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'd_field_grpc.reflection.v1alpha.ErrorResponse_error_code'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_grpc.reflection.v1alpha.ErrorResponse'(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'd_field_grpc.reflection.v1alpha.ErrorResponse_error_message'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_grpc.reflection.v1alpha.ErrorResponse'(<<>>, 0, 0, _, F@_1, F@_2, _) -> #{error_code => F@_1, error_message => F@_2};
'dfp_read_field_def_grpc.reflection.v1alpha.ErrorResponse'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dg_read_field_def_grpc.reflection.v1alpha.ErrorResponse'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

'dg_read_field_def_grpc.reflection.v1alpha.ErrorResponse'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 ->
    'dg_read_field_def_grpc.reflection.v1alpha.ErrorResponse'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'dg_read_field_def_grpc.reflection.v1alpha.ErrorResponse'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> 'd_field_grpc.reflection.v1alpha.ErrorResponse_error_code'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        18 -> 'd_field_grpc.reflection.v1alpha.ErrorResponse_error_message'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> 'skip_varint_grpc.reflection.v1alpha.ErrorResponse'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> 'skip_64_grpc.reflection.v1alpha.ErrorResponse'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> 'skip_length_delimited_grpc.reflection.v1alpha.ErrorResponse'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> 'skip_group_grpc.reflection.v1alpha.ErrorResponse'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> 'skip_32_grpc.reflection.v1alpha.ErrorResponse'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
'dg_read_field_def_grpc.reflection.v1alpha.ErrorResponse'(<<>>, 0, 0, _, F@_1, F@_2, _) -> #{error_code => F@_1, error_message => F@_2}.

'd_field_grpc.reflection.v1alpha.ErrorResponse_error_code'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> 'd_field_grpc.reflection.v1alpha.ErrorResponse_error_code'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'd_field_grpc.reflection.v1alpha.ErrorResponse_error_code'(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end, Rest},
    'dfp_read_field_def_grpc.reflection.v1alpha.ErrorResponse'(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

'd_field_grpc.reflection.v1alpha.ErrorResponse_error_message'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 ->
    'd_field_grpc.reflection.v1alpha.ErrorResponse_error_message'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'd_field_grpc.reflection.v1alpha.ErrorResponse_error_message'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    'dfp_read_field_def_grpc.reflection.v1alpha.ErrorResponse'(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

'skip_varint_grpc.reflection.v1alpha.ErrorResponse'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'skip_varint_grpc.reflection.v1alpha.ErrorResponse'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'skip_varint_grpc.reflection.v1alpha.ErrorResponse'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dfp_read_field_def_grpc.reflection.v1alpha.ErrorResponse'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_length_delimited_grpc.reflection.v1alpha.ErrorResponse'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 ->
    'skip_length_delimited_grpc.reflection.v1alpha.ErrorResponse'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'skip_length_delimited_grpc.reflection.v1alpha.ErrorResponse'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_grpc.reflection.v1alpha.ErrorResponse'(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

'skip_group_grpc.reflection.v1alpha.ErrorResponse'(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_grpc.reflection.v1alpha.ErrorResponse'(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

'skip_32_grpc.reflection.v1alpha.ErrorResponse'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dfp_read_field_def_grpc.reflection.v1alpha.ErrorResponse'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_64_grpc.reflection.v1alpha.ErrorResponse'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dfp_read_field_def_grpc.reflection.v1alpha.ErrorResponse'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) -> merge_msgs(Prev, New, MsgName, []).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        'grpc.reflection.v1alpha.ServerReflectionRequest' -> 'merge_msg_grpc.reflection.v1alpha.ServerReflectionRequest'(Prev, New, TrUserData);
        'grpc.reflection.v1alpha.ExtensionRequest' -> 'merge_msg_grpc.reflection.v1alpha.ExtensionRequest'(Prev, New, TrUserData);
        'grpc.reflection.v1alpha.ServerReflectionResponse' -> 'merge_msg_grpc.reflection.v1alpha.ServerReflectionResponse'(Prev, New, TrUserData);
        'grpc.reflection.v1alpha.FileDescriptorResponse' -> 'merge_msg_grpc.reflection.v1alpha.FileDescriptorResponse'(Prev, New, TrUserData);
        'grpc.reflection.v1alpha.ExtensionNumberResponse' -> 'merge_msg_grpc.reflection.v1alpha.ExtensionNumberResponse'(Prev, New, TrUserData);
        'grpc.reflection.v1alpha.ListServiceResponse' -> 'merge_msg_grpc.reflection.v1alpha.ListServiceResponse'(Prev, New, TrUserData);
        'grpc.reflection.v1alpha.ServiceResponse' -> 'merge_msg_grpc.reflection.v1alpha.ServiceResponse'(Prev, New, TrUserData);
        'grpc.reflection.v1alpha.ErrorResponse' -> 'merge_msg_grpc.reflection.v1alpha.ErrorResponse'(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,'merge_msg_grpc.reflection.v1alpha.ServerReflectionRequest'/3}).
'merge_msg_grpc.reflection.v1alpha.ServerReflectionRequest'(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{host := NFhost}} -> S1#{host => NFhost};
             {#{host := PFhost}, _} -> S1#{host => PFhost};
             _ -> S1
         end,
    case {PMsg, NMsg} of
        {#{message_request := {file_containing_extension, OPFmessage_request}}, #{message_request := {file_containing_extension, ONFmessage_request}}} ->
            S2#{message_request => {file_containing_extension, 'merge_msg_grpc.reflection.v1alpha.ExtensionRequest'(OPFmessage_request, ONFmessage_request, TrUserData)}};
        {_, #{message_request := NFmessage_request}} -> S2#{message_request => NFmessage_request};
        {#{message_request := PFmessage_request}, _} -> S2#{message_request => PFmessage_request};
        {_, _} -> S2
    end.

-compile({nowarn_unused_function,'merge_msg_grpc.reflection.v1alpha.ExtensionRequest'/3}).
'merge_msg_grpc.reflection.v1alpha.ExtensionRequest'(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{containing_type := NFcontaining_type}} -> S1#{containing_type => NFcontaining_type};
             {#{containing_type := PFcontaining_type}, _} -> S1#{containing_type => PFcontaining_type};
             _ -> S1
         end,
    case {PMsg, NMsg} of
        {_, #{extension_number := NFextension_number}} -> S2#{extension_number => NFextension_number};
        {#{extension_number := PFextension_number}, _} -> S2#{extension_number => PFextension_number};
        _ -> S2
    end.

-compile({nowarn_unused_function,'merge_msg_grpc.reflection.v1alpha.ServerReflectionResponse'/3}).
'merge_msg_grpc.reflection.v1alpha.ServerReflectionResponse'(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{valid_host := NFvalid_host}} -> S1#{valid_host => NFvalid_host};
             {#{valid_host := PFvalid_host}, _} -> S1#{valid_host => PFvalid_host};
             _ -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {#{original_request := PForiginal_request}, #{original_request := NForiginal_request}} -> S2#{original_request => 'merge_msg_grpc.reflection.v1alpha.ServerReflectionRequest'(PForiginal_request, NForiginal_request, TrUserData)};
             {_, #{original_request := NForiginal_request}} -> S2#{original_request => NForiginal_request};
             {#{original_request := PForiginal_request}, _} -> S2#{original_request => PForiginal_request};
             {_, _} -> S2
         end,
    case {PMsg, NMsg} of
        {#{message_response := {file_descriptor_response, OPFmessage_response}}, #{message_response := {file_descriptor_response, ONFmessage_response}}} ->
            S3#{message_response => {file_descriptor_response, 'merge_msg_grpc.reflection.v1alpha.FileDescriptorResponse'(OPFmessage_response, ONFmessage_response, TrUserData)}};
        {#{message_response := {all_extension_numbers_response, OPFmessage_response}}, #{message_response := {all_extension_numbers_response, ONFmessage_response}}} ->
            S3#{message_response => {all_extension_numbers_response, 'merge_msg_grpc.reflection.v1alpha.ExtensionNumberResponse'(OPFmessage_response, ONFmessage_response, TrUserData)}};
        {#{message_response := {list_services_response, OPFmessage_response}}, #{message_response := {list_services_response, ONFmessage_response}}} ->
            S3#{message_response => {list_services_response, 'merge_msg_grpc.reflection.v1alpha.ListServiceResponse'(OPFmessage_response, ONFmessage_response, TrUserData)}};
        {#{message_response := {error_response, OPFmessage_response}}, #{message_response := {error_response, ONFmessage_response}}} ->
            S3#{message_response => {error_response, 'merge_msg_grpc.reflection.v1alpha.ErrorResponse'(OPFmessage_response, ONFmessage_response, TrUserData)}};
        {_, #{message_response := NFmessage_response}} -> S3#{message_response => NFmessage_response};
        {#{message_response := PFmessage_response}, _} -> S3#{message_response => PFmessage_response};
        {_, _} -> S3
    end.

-compile({nowarn_unused_function,'merge_msg_grpc.reflection.v1alpha.FileDescriptorResponse'/3}).
'merge_msg_grpc.reflection.v1alpha.FileDescriptorResponse'(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {#{file_descriptor_proto := PFfile_descriptor_proto}, #{file_descriptor_proto := NFfile_descriptor_proto}} -> S1#{file_descriptor_proto => 'erlang_++'(PFfile_descriptor_proto, NFfile_descriptor_proto, TrUserData)};
        {_, #{file_descriptor_proto := NFfile_descriptor_proto}} -> S1#{file_descriptor_proto => NFfile_descriptor_proto};
        {#{file_descriptor_proto := PFfile_descriptor_proto}, _} -> S1#{file_descriptor_proto => PFfile_descriptor_proto};
        {_, _} -> S1
    end.

-compile({nowarn_unused_function,'merge_msg_grpc.reflection.v1alpha.ExtensionNumberResponse'/3}).
'merge_msg_grpc.reflection.v1alpha.ExtensionNumberResponse'(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{base_type_name := NFbase_type_name}} -> S1#{base_type_name => NFbase_type_name};
             {#{base_type_name := PFbase_type_name}, _} -> S1#{base_type_name => PFbase_type_name};
             _ -> S1
         end,
    case {PMsg, NMsg} of
        {#{extension_number := PFextension_number}, #{extension_number := NFextension_number}} -> S2#{extension_number => 'erlang_++'(PFextension_number, NFextension_number, TrUserData)};
        {_, #{extension_number := NFextension_number}} -> S2#{extension_number => NFextension_number};
        {#{extension_number := PFextension_number}, _} -> S2#{extension_number => PFextension_number};
        {_, _} -> S2
    end.

-compile({nowarn_unused_function,'merge_msg_grpc.reflection.v1alpha.ListServiceResponse'/3}).
'merge_msg_grpc.reflection.v1alpha.ListServiceResponse'(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {#{service := PFservice}, #{service := NFservice}} -> S1#{service => 'erlang_++'(PFservice, NFservice, TrUserData)};
        {_, #{service := NFservice}} -> S1#{service => NFservice};
        {#{service := PFservice}, _} -> S1#{service => PFservice};
        {_, _} -> S1
    end.

-compile({nowarn_unused_function,'merge_msg_grpc.reflection.v1alpha.ServiceResponse'/3}).
'merge_msg_grpc.reflection.v1alpha.ServiceResponse'(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {_, #{name := NFname}} -> S1#{name => NFname};
        {#{name := PFname}, _} -> S1#{name => PFname};
        _ -> S1
    end.

-compile({nowarn_unused_function,'merge_msg_grpc.reflection.v1alpha.ErrorResponse'/3}).
'merge_msg_grpc.reflection.v1alpha.ErrorResponse'(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{error_code := NFerror_code}} -> S1#{error_code => NFerror_code};
             {#{error_code := PFerror_code}, _} -> S1#{error_code => PFerror_code};
             _ -> S1
         end,
    case {PMsg, NMsg} of
        {_, #{error_message := NFerror_message}} -> S2#{error_message => NFerror_message};
        {#{error_message := PFerror_message}, _} -> S2#{error_message => PFerror_message};
        _ -> S2
    end.


verify_msg(Msg, MsgName) when is_atom(MsgName) -> verify_msg(Msg, MsgName, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        'grpc.reflection.v1alpha.ServerReflectionRequest' -> 'v_msg_grpc.reflection.v1alpha.ServerReflectionRequest'(Msg, [MsgName], TrUserData);
        'grpc.reflection.v1alpha.ExtensionRequest' -> 'v_msg_grpc.reflection.v1alpha.ExtensionRequest'(Msg, [MsgName], TrUserData);
        'grpc.reflection.v1alpha.ServerReflectionResponse' -> 'v_msg_grpc.reflection.v1alpha.ServerReflectionResponse'(Msg, [MsgName], TrUserData);
        'grpc.reflection.v1alpha.FileDescriptorResponse' -> 'v_msg_grpc.reflection.v1alpha.FileDescriptorResponse'(Msg, [MsgName], TrUserData);
        'grpc.reflection.v1alpha.ExtensionNumberResponse' -> 'v_msg_grpc.reflection.v1alpha.ExtensionNumberResponse'(Msg, [MsgName], TrUserData);
        'grpc.reflection.v1alpha.ListServiceResponse' -> 'v_msg_grpc.reflection.v1alpha.ListServiceResponse'(Msg, [MsgName], TrUserData);
        'grpc.reflection.v1alpha.ServiceResponse' -> 'v_msg_grpc.reflection.v1alpha.ServiceResponse'(Msg, [MsgName], TrUserData);
        'grpc.reflection.v1alpha.ErrorResponse' -> 'v_msg_grpc.reflection.v1alpha.ErrorResponse'(Msg, [MsgName], TrUserData);
        _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,'v_submsg_grpc.reflection.v1alpha.ServerReflectionRequest'/3}).
-dialyzer({nowarn_function,'v_submsg_grpc.reflection.v1alpha.ServerReflectionRequest'/3}).
'v_submsg_grpc.reflection.v1alpha.ServerReflectionRequest'(Msg, Path, TrUserData) -> 'v_msg_grpc.reflection.v1alpha.ServerReflectionRequest'(Msg, Path, TrUserData).

-compile({nowarn_unused_function,'v_msg_grpc.reflection.v1alpha.ServerReflectionRequest'/3}).
-dialyzer({nowarn_function,'v_msg_grpc.reflection.v1alpha.ServerReflectionRequest'/3}).
'v_msg_grpc.reflection.v1alpha.ServerReflectionRequest'(#{} = M, Path, TrUserData) ->
    case M of
        #{host := F1} -> v_type_string(F1, [host | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{message_request := {file_by_filename, OF2}} -> v_type_string(OF2, [file_by_filename, message_request | Path], TrUserData);
        #{message_request := {file_containing_symbol, OF2}} -> v_type_string(OF2, [file_containing_symbol, message_request | Path], TrUserData);
        #{message_request := {file_containing_extension, OF2}} -> 'v_submsg_grpc.reflection.v1alpha.ExtensionRequest'(OF2, [file_containing_extension, message_request | Path], TrUserData);
        #{message_request := {all_extension_numbers_of_type, OF2}} -> v_type_string(OF2, [all_extension_numbers_of_type, message_request | Path], TrUserData);
        #{message_request := {list_services, OF2}} -> v_type_string(OF2, [list_services, message_request | Path], TrUserData);
        #{message_request := F2} -> mk_type_error(invalid_oneof, F2, [message_request | Path]);
        _ -> ok
    end,
    lists:foreach(fun (host) -> ok;
                      (message_request) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
'v_msg_grpc.reflection.v1alpha.ServerReflectionRequest'(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'grpc.reflection.v1alpha.ServerReflectionRequest'}, M, Path);
'v_msg_grpc.reflection.v1alpha.ServerReflectionRequest'(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'grpc.reflection.v1alpha.ServerReflectionRequest'}, X, Path).

-compile({nowarn_unused_function,'v_submsg_grpc.reflection.v1alpha.ExtensionRequest'/3}).
-dialyzer({nowarn_function,'v_submsg_grpc.reflection.v1alpha.ExtensionRequest'/3}).
'v_submsg_grpc.reflection.v1alpha.ExtensionRequest'(Msg, Path, TrUserData) -> 'v_msg_grpc.reflection.v1alpha.ExtensionRequest'(Msg, Path, TrUserData).

-compile({nowarn_unused_function,'v_msg_grpc.reflection.v1alpha.ExtensionRequest'/3}).
-dialyzer({nowarn_function,'v_msg_grpc.reflection.v1alpha.ExtensionRequest'/3}).
'v_msg_grpc.reflection.v1alpha.ExtensionRequest'(#{} = M, Path, TrUserData) ->
    case M of
        #{containing_type := F1} -> v_type_string(F1, [containing_type | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{extension_number := F2} -> v_type_int32(F2, [extension_number | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (containing_type) -> ok;
                      (extension_number) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
'v_msg_grpc.reflection.v1alpha.ExtensionRequest'(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'grpc.reflection.v1alpha.ExtensionRequest'}, M, Path);
'v_msg_grpc.reflection.v1alpha.ExtensionRequest'(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'grpc.reflection.v1alpha.ExtensionRequest'}, X, Path).

-compile({nowarn_unused_function,'v_msg_grpc.reflection.v1alpha.ServerReflectionResponse'/3}).
-dialyzer({nowarn_function,'v_msg_grpc.reflection.v1alpha.ServerReflectionResponse'/3}).
'v_msg_grpc.reflection.v1alpha.ServerReflectionResponse'(#{} = M, Path, TrUserData) ->
    case M of
        #{valid_host := F1} -> v_type_string(F1, [valid_host | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{original_request := F2} -> 'v_submsg_grpc.reflection.v1alpha.ServerReflectionRequest'(F2, [original_request | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{message_response := {file_descriptor_response, OF3}} -> 'v_submsg_grpc.reflection.v1alpha.FileDescriptorResponse'(OF3, [file_descriptor_response, message_response | Path], TrUserData);
        #{message_response := {all_extension_numbers_response, OF3}} -> 'v_submsg_grpc.reflection.v1alpha.ExtensionNumberResponse'(OF3, [all_extension_numbers_response, message_response | Path], TrUserData);
        #{message_response := {list_services_response, OF3}} -> 'v_submsg_grpc.reflection.v1alpha.ListServiceResponse'(OF3, [list_services_response, message_response | Path], TrUserData);
        #{message_response := {error_response, OF3}} -> 'v_submsg_grpc.reflection.v1alpha.ErrorResponse'(OF3, [error_response, message_response | Path], TrUserData);
        #{message_response := F3} -> mk_type_error(invalid_oneof, F3, [message_response | Path]);
        _ -> ok
    end,
    lists:foreach(fun (valid_host) -> ok;
                      (original_request) -> ok;
                      (message_response) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
'v_msg_grpc.reflection.v1alpha.ServerReflectionResponse'(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'grpc.reflection.v1alpha.ServerReflectionResponse'}, M, Path);
'v_msg_grpc.reflection.v1alpha.ServerReflectionResponse'(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'grpc.reflection.v1alpha.ServerReflectionResponse'}, X, Path).

-compile({nowarn_unused_function,'v_submsg_grpc.reflection.v1alpha.FileDescriptorResponse'/3}).
-dialyzer({nowarn_function,'v_submsg_grpc.reflection.v1alpha.FileDescriptorResponse'/3}).
'v_submsg_grpc.reflection.v1alpha.FileDescriptorResponse'(Msg, Path, TrUserData) -> 'v_msg_grpc.reflection.v1alpha.FileDescriptorResponse'(Msg, Path, TrUserData).

-compile({nowarn_unused_function,'v_msg_grpc.reflection.v1alpha.FileDescriptorResponse'/3}).
-dialyzer({nowarn_function,'v_msg_grpc.reflection.v1alpha.FileDescriptorResponse'/3}).
'v_msg_grpc.reflection.v1alpha.FileDescriptorResponse'(#{} = M, Path, TrUserData) ->
    case M of
        #{file_descriptor_proto := F1} ->
            if is_list(F1) ->
                   _ = [v_type_bytes(Elem, [file_descriptor_proto | Path], TrUserData) || Elem <- F1],
                   ok;
               true -> mk_type_error({invalid_list_of, bytes}, F1, [file_descriptor_proto | Path])
            end;
        _ -> ok
    end,
    lists:foreach(fun (file_descriptor_proto) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
'v_msg_grpc.reflection.v1alpha.FileDescriptorResponse'(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'grpc.reflection.v1alpha.FileDescriptorResponse'}, M, Path);
'v_msg_grpc.reflection.v1alpha.FileDescriptorResponse'(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'grpc.reflection.v1alpha.FileDescriptorResponse'}, X, Path).

-compile({nowarn_unused_function,'v_submsg_grpc.reflection.v1alpha.ExtensionNumberResponse'/3}).
-dialyzer({nowarn_function,'v_submsg_grpc.reflection.v1alpha.ExtensionNumberResponse'/3}).
'v_submsg_grpc.reflection.v1alpha.ExtensionNumberResponse'(Msg, Path, TrUserData) -> 'v_msg_grpc.reflection.v1alpha.ExtensionNumberResponse'(Msg, Path, TrUserData).

-compile({nowarn_unused_function,'v_msg_grpc.reflection.v1alpha.ExtensionNumberResponse'/3}).
-dialyzer({nowarn_function,'v_msg_grpc.reflection.v1alpha.ExtensionNumberResponse'/3}).
'v_msg_grpc.reflection.v1alpha.ExtensionNumberResponse'(#{} = M, Path, TrUserData) ->
    case M of
        #{base_type_name := F1} -> v_type_string(F1, [base_type_name | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{extension_number := F2} ->
            if is_list(F2) ->
                   _ = [v_type_int32(Elem, [extension_number | Path], TrUserData) || Elem <- F2],
                   ok;
               true -> mk_type_error({invalid_list_of, int32}, F2, [extension_number | Path])
            end;
        _ -> ok
    end,
    lists:foreach(fun (base_type_name) -> ok;
                      (extension_number) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
'v_msg_grpc.reflection.v1alpha.ExtensionNumberResponse'(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'grpc.reflection.v1alpha.ExtensionNumberResponse'}, M, Path);
'v_msg_grpc.reflection.v1alpha.ExtensionNumberResponse'(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'grpc.reflection.v1alpha.ExtensionNumberResponse'}, X, Path).

-compile({nowarn_unused_function,'v_submsg_grpc.reflection.v1alpha.ListServiceResponse'/3}).
-dialyzer({nowarn_function,'v_submsg_grpc.reflection.v1alpha.ListServiceResponse'/3}).
'v_submsg_grpc.reflection.v1alpha.ListServiceResponse'(Msg, Path, TrUserData) -> 'v_msg_grpc.reflection.v1alpha.ListServiceResponse'(Msg, Path, TrUserData).

-compile({nowarn_unused_function,'v_msg_grpc.reflection.v1alpha.ListServiceResponse'/3}).
-dialyzer({nowarn_function,'v_msg_grpc.reflection.v1alpha.ListServiceResponse'/3}).
'v_msg_grpc.reflection.v1alpha.ListServiceResponse'(#{} = M, Path, TrUserData) ->
    case M of
        #{service := F1} ->
            if is_list(F1) ->
                   _ = ['v_submsg_grpc.reflection.v1alpha.ServiceResponse'(Elem, [service | Path], TrUserData) || Elem <- F1],
                   ok;
               true -> mk_type_error({invalid_list_of, {msg, 'grpc.reflection.v1alpha.ServiceResponse'}}, F1, [service | Path])
            end;
        _ -> ok
    end,
    lists:foreach(fun (service) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
'v_msg_grpc.reflection.v1alpha.ListServiceResponse'(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'grpc.reflection.v1alpha.ListServiceResponse'}, M, Path);
'v_msg_grpc.reflection.v1alpha.ListServiceResponse'(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'grpc.reflection.v1alpha.ListServiceResponse'}, X, Path).

-compile({nowarn_unused_function,'v_submsg_grpc.reflection.v1alpha.ServiceResponse'/3}).
-dialyzer({nowarn_function,'v_submsg_grpc.reflection.v1alpha.ServiceResponse'/3}).
'v_submsg_grpc.reflection.v1alpha.ServiceResponse'(Msg, Path, TrUserData) -> 'v_msg_grpc.reflection.v1alpha.ServiceResponse'(Msg, Path, TrUserData).

-compile({nowarn_unused_function,'v_msg_grpc.reflection.v1alpha.ServiceResponse'/3}).
-dialyzer({nowarn_function,'v_msg_grpc.reflection.v1alpha.ServiceResponse'/3}).
'v_msg_grpc.reflection.v1alpha.ServiceResponse'(#{} = M, Path, TrUserData) ->
    case M of
        #{name := F1} -> v_type_string(F1, [name | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (name) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
'v_msg_grpc.reflection.v1alpha.ServiceResponse'(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'grpc.reflection.v1alpha.ServiceResponse'}, M, Path);
'v_msg_grpc.reflection.v1alpha.ServiceResponse'(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'grpc.reflection.v1alpha.ServiceResponse'}, X, Path).

-compile({nowarn_unused_function,'v_submsg_grpc.reflection.v1alpha.ErrorResponse'/3}).
-dialyzer({nowarn_function,'v_submsg_grpc.reflection.v1alpha.ErrorResponse'/3}).
'v_submsg_grpc.reflection.v1alpha.ErrorResponse'(Msg, Path, TrUserData) -> 'v_msg_grpc.reflection.v1alpha.ErrorResponse'(Msg, Path, TrUserData).

-compile({nowarn_unused_function,'v_msg_grpc.reflection.v1alpha.ErrorResponse'/3}).
-dialyzer({nowarn_function,'v_msg_grpc.reflection.v1alpha.ErrorResponse'/3}).
'v_msg_grpc.reflection.v1alpha.ErrorResponse'(#{} = M, Path, TrUserData) ->
    case M of
        #{error_code := F1} -> v_type_int32(F1, [error_code | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{error_message := F2} -> v_type_string(F2, [error_message | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (error_code) -> ok;
                      (error_message) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
'v_msg_grpc.reflection.v1alpha.ErrorResponse'(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'grpc.reflection.v1alpha.ErrorResponse'}, M, Path);
'v_msg_grpc.reflection.v1alpha.ErrorResponse'(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'grpc.reflection.v1alpha.ErrorResponse'}, X, Path).

-compile({nowarn_unused_function,v_type_int32/3}).
-dialyzer({nowarn_function,v_type_int32/3}).
v_type_int32(N, _Path, _TrUserData) when is_integer(N), -2147483648 =< N, N =< 2147483647 -> ok;
v_type_int32(N, Path, _TrUserData) when is_integer(N) -> mk_type_error({value_out_of_range, int32, signed, 32}, N, Path);
v_type_int32(X, Path, _TrUserData) -> mk_type_error({bad_integer, int32, signed, 32}, X, Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
        B when is_binary(B) -> ok;
        {error, _, _} -> mk_type_error(bad_unicode_string, S, Path)
    catch
        error:badarg -> mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) -> mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,v_type_bytes/3}).
-dialyzer({nowarn_function,v_type_bytes/3}).
v_type_bytes(B, _Path, _TrUserData) when is_binary(B) -> ok;
v_type_bytes(B, _Path, _TrUserData) when is_list(B) -> ok;
v_type_bytes(X, Path, _TrUserData) -> mk_type_error(bad_binary_value, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error, {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) -> lists:append(lists:join(".", lists:map(fun atom_to_list/1, lists:reverse(PathR)))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.

to_json(Msg, MsgName) when is_map(Msg), is_atom(MsgName) -> to_json(Msg, MsgName, []).

to_json(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
        true -> verify_msg(Msg, MsgName, Opts);
        false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        'grpc.reflection.v1alpha.ServerReflectionRequest' -> 'to_json_msg_grpc.reflection.v1alpha.ServerReflectionRequest'(id(Msg, TrUserData), TrUserData);
        'grpc.reflection.v1alpha.ExtensionRequest' -> 'to_json_msg_grpc.reflection.v1alpha.ExtensionRequest'(id(Msg, TrUserData), TrUserData);
        'grpc.reflection.v1alpha.ServerReflectionResponse' -> 'to_json_msg_grpc.reflection.v1alpha.ServerReflectionResponse'(id(Msg, TrUserData), TrUserData);
        'grpc.reflection.v1alpha.FileDescriptorResponse' -> 'to_json_msg_grpc.reflection.v1alpha.FileDescriptorResponse'(id(Msg, TrUserData), TrUserData);
        'grpc.reflection.v1alpha.ExtensionNumberResponse' -> 'to_json_msg_grpc.reflection.v1alpha.ExtensionNumberResponse'(id(Msg, TrUserData), TrUserData);
        'grpc.reflection.v1alpha.ListServiceResponse' -> 'to_json_msg_grpc.reflection.v1alpha.ListServiceResponse'(id(Msg, TrUserData), TrUserData);
        'grpc.reflection.v1alpha.ServiceResponse' -> 'to_json_msg_grpc.reflection.v1alpha.ServiceResponse'(id(Msg, TrUserData), TrUserData);
        'grpc.reflection.v1alpha.ErrorResponse' -> 'to_json_msg_grpc.reflection.v1alpha.ErrorResponse'(id(Msg, TrUserData), TrUserData);
        X -> error({gpb_error, {no_such_message, X}})
    end.

'to_json_msg_grpc.reflection.v1alpha.ServerReflectionRequest'(#{} = M, TrUserData) ->
    J0 = tj_new_object(),
    J1 = case M of
             #{host := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case is_empty_string(TrF1) of
                         true -> J0;
                         false -> tj_add_field(<<"host">>, tj_string(TrF1), J0)
                     end
                 end;
             _ -> J0
         end,
    tj_finalize_obj(case M of
                        #{message_request := F2} ->
                            case id(F2, TrUserData) of
                                {file_by_filename, TF2} -> begin TrTF2 = id(TF2, TrUserData), tj_add_field(<<"fileByFilename">>, tj_string(TrTF2), J1) end;
                                {file_containing_symbol, TF2} -> begin TrTF2 = id(TF2, TrUserData), tj_add_field(<<"fileContainingSymbol">>, tj_string(TrTF2), J1) end;
                                {file_containing_extension, TF2} -> begin TrTF2 = id(TF2, TrUserData), tj_add_field(<<"fileContainingExtension">>, 'to_json_msg_grpc.reflection.v1alpha.ExtensionRequest'(TrTF2, TrUserData), J1) end;
                                {all_extension_numbers_of_type, TF2} -> begin TrTF2 = id(TF2, TrUserData), tj_add_field(<<"allExtensionNumbersOfType">>, tj_string(TrTF2), J1) end;
                                {list_services, TF2} -> begin TrTF2 = id(TF2, TrUserData), tj_add_field(<<"listServices">>, tj_string(TrTF2), J1) end
                            end;
                        _ -> J1
                    end).

'to_json_msg_grpc.reflection.v1alpha.ExtensionRequest'(#{} = M, TrUserData) ->
    J0 = tj_new_object(),
    J1 = case M of
             #{containing_type := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case is_empty_string(TrF1) of
                         true -> J0;
                         false -> tj_add_field(<<"containingType">>, tj_string(TrF1), J0)
                     end
                 end;
             _ -> J0
         end,
    tj_finalize_obj(case M of
                        #{extension_number := F2} ->
                            begin
                                TrF2 = id(F2, TrUserData),
                                if TrF2 =:= 0 -> J1;
                                   true -> tj_add_field(<<"extensionNumber">>, TrF2, J1)
                                end
                            end;
                        _ -> J1
                    end).

'to_json_msg_grpc.reflection.v1alpha.ServerReflectionResponse'(#{} = M, TrUserData) ->
    J0 = tj_new_object(),
    J1 = case M of
             #{valid_host := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case is_empty_string(TrF1) of
                         true -> J0;
                         false -> tj_add_field(<<"validHost">>, tj_string(TrF1), J0)
                     end
                 end;
             _ -> J0
         end,
    J2 = case M of
             #{original_request := F2} ->
                 begin
                     TrF2 = id(F2, TrUserData),
                     if TrF2 =:= undefined -> J1;
                        true -> tj_add_field(<<"originalRequest">>, 'to_json_msg_grpc.reflection.v1alpha.ServerReflectionRequest'(TrF2, TrUserData), J1)
                     end
                 end;
             _ -> J1
         end,
    tj_finalize_obj(case M of
                        #{message_response := F3} ->
                            case id(F3, TrUserData) of
                                {file_descriptor_response, TF3} -> begin TrTF3 = id(TF3, TrUserData), tj_add_field(<<"fileDescriptorResponse">>, 'to_json_msg_grpc.reflection.v1alpha.FileDescriptorResponse'(TrTF3, TrUserData), J2) end;
                                {all_extension_numbers_response, TF3} -> begin TrTF3 = id(TF3, TrUserData), tj_add_field(<<"allExtensionNumbersResponse">>, 'to_json_msg_grpc.reflection.v1alpha.ExtensionNumberResponse'(TrTF3, TrUserData), J2) end;
                                {list_services_response, TF3} -> begin TrTF3 = id(TF3, TrUserData), tj_add_field(<<"listServicesResponse">>, 'to_json_msg_grpc.reflection.v1alpha.ListServiceResponse'(TrTF3, TrUserData), J2) end;
                                {error_response, TF3} -> begin TrTF3 = id(TF3, TrUserData), tj_add_field(<<"errorResponse">>, 'to_json_msg_grpc.reflection.v1alpha.ErrorResponse'(TrTF3, TrUserData), J2) end
                            end;
                        _ -> J2
                    end).

'to_json_msg_grpc.reflection.v1alpha.FileDescriptorResponse'(#{} = M, TrUserData) ->
    J0 = tj_new_object(),
    tj_finalize_obj(case M of
                        #{file_descriptor_proto := F1} ->
                            TrF1 = id(F1, TrUserData),
                            if TrF1 == [] -> J0;
                               true -> tj_add_field(<<"fileDescriptorProto">>, tj_array([id(tj_bytes(Elem), TrUserData) || Elem <- TrF1]), J0)
                            end;
                        _ -> J0
                    end).

'to_json_msg_grpc.reflection.v1alpha.ExtensionNumberResponse'(#{} = M, TrUserData) ->
    J0 = tj_new_object(),
    J1 = case M of
             #{base_type_name := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case is_empty_string(TrF1) of
                         true -> J0;
                         false -> tj_add_field(<<"baseTypeName">>, tj_string(TrF1), J0)
                     end
                 end;
             _ -> J0
         end,
    tj_finalize_obj(case M of
                        #{extension_number := F2} ->
                            TrF2 = id(F2, TrUserData),
                            if TrF2 == [] -> J1;
                               true -> tj_add_field(<<"extensionNumber">>, tj_array([id(Elem, TrUserData) || Elem <- TrF2]), J1)
                            end;
                        _ -> J1
                    end).

'to_json_msg_grpc.reflection.v1alpha.ListServiceResponse'(#{} = M, TrUserData) ->
    J0 = tj_new_object(),
    tj_finalize_obj(case M of
                        #{service := F1} ->
                            TrF1 = id(F1, TrUserData),
                            if TrF1 == [] -> J0;
                               true -> tj_add_field(<<"service">>, tj_array([id('to_json_msg_grpc.reflection.v1alpha.ServiceResponse'(Elem, TrUserData), TrUserData) || Elem <- TrF1]), J0)
                            end;
                        _ -> J0
                    end).

'to_json_msg_grpc.reflection.v1alpha.ServiceResponse'(#{} = M, TrUserData) ->
    J0 = tj_new_object(),
    tj_finalize_obj(case M of
                        #{name := F1} ->
                            begin
                                TrF1 = id(F1, TrUserData),
                                case is_empty_string(TrF1) of
                                    true -> J0;
                                    false -> tj_add_field(<<"name">>, tj_string(TrF1), J0)
                                end
                            end;
                        _ -> J0
                    end).

'to_json_msg_grpc.reflection.v1alpha.ErrorResponse'(#{} = M, TrUserData) ->
    J0 = tj_new_object(),
    J1 = case M of
             #{error_code := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     if TrF1 =:= 0 -> J0;
                        true -> tj_add_field(<<"errorCode">>, TrF1, J0)
                     end
                 end;
             _ -> J0
         end,
    tj_finalize_obj(case M of
                        #{error_message := F2} ->
                            begin
                                TrF2 = id(F2, TrUserData),
                                case is_empty_string(TrF2) of
                                    true -> J1;
                                    false -> tj_add_field(<<"errorMessage">>, tj_string(TrF2), J1)
                                end
                            end;
                        _ -> J1
                    end).

%% map object format helpers
%% For example jsx, jiffy, others
-compile({nowarn_unused_function,tj_new_object/0}).
tj_new_object() -> #{}.

-compile({nowarn_unused_function,tj_add_field/3}).
tj_add_field(FieldName, Value, Object) -> Object#{FieldName => Value}.

-compile({nowarn_unused_function,tj_finalize_obj/1}).
tj_finalize_obj(Object) -> Object.

-compile({nowarn_unused_function,tj_array/1}).
tj_array(L) -> L.

tj_string(Value) -> unicode:characters_to_binary(Value).

tj_bytes(Value) -> base64:encode(iolist_to_binary(Value)).

from_json(Json, MsgName) -> from_json(Json, MsgName, []).

from_json(Json, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    from_json_1_catch(Json, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
from_json_1_catch(Json, MsgName, TrUserData) ->
    try from_json_2_doit(MsgName, Json, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{from_json_failure, {Json, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
from_json_1_catch(Json, MsgName, TrUserData) ->
    try from_json_2_doit(MsgName, Json, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{from_json_failure, {Json, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

from_json_2_doit('grpc.reflection.v1alpha.ServerReflectionRequest', Json, TrUserData) -> id('from_json_msg_grpc.reflection.v1alpha.ServerReflectionRequest'(Json, TrUserData), TrUserData);
from_json_2_doit('grpc.reflection.v1alpha.ExtensionRequest', Json, TrUserData) -> id('from_json_msg_grpc.reflection.v1alpha.ExtensionRequest'(Json, TrUserData), TrUserData);
from_json_2_doit('grpc.reflection.v1alpha.ServerReflectionResponse', Json, TrUserData) -> id('from_json_msg_grpc.reflection.v1alpha.ServerReflectionResponse'(Json, TrUserData), TrUserData);
from_json_2_doit('grpc.reflection.v1alpha.FileDescriptorResponse', Json, TrUserData) -> id('from_json_msg_grpc.reflection.v1alpha.FileDescriptorResponse'(Json, TrUserData), TrUserData);
from_json_2_doit('grpc.reflection.v1alpha.ExtensionNumberResponse', Json, TrUserData) -> id('from_json_msg_grpc.reflection.v1alpha.ExtensionNumberResponse'(Json, TrUserData), TrUserData);
from_json_2_doit('grpc.reflection.v1alpha.ListServiceResponse', Json, TrUserData) -> id('from_json_msg_grpc.reflection.v1alpha.ListServiceResponse'(Json, TrUserData), TrUserData);
from_json_2_doit('grpc.reflection.v1alpha.ServiceResponse', Json, TrUserData) -> id('from_json_msg_grpc.reflection.v1alpha.ServiceResponse'(Json, TrUserData), TrUserData);
from_json_2_doit('grpc.reflection.v1alpha.ErrorResponse', Json, TrUserData) -> id('from_json_msg_grpc.reflection.v1alpha.ErrorResponse'(Json, TrUserData), TrUserData).

'from_json_msg_grpc.reflection.v1alpha.ServerReflectionRequest'(Json, TrUserData) -> 'fj_msg_grpc.reflection.v1alpha.ServerReflectionRequest'(fj_next(fj_iter(Json)), #{host => id(<<>>, TrUserData)}, TrUserData).

'fj_msg_grpc.reflection.v1alpha.ServerReflectionRequest'({JKey, JValue, JRest}, EMsg, TrUserData) ->
    EMsg2 = case JKey of
                <<"host">> ->
                    if JValue =:= binary -> EMsg;
                       true -> EMsg#{host => id(fj_string(JValue), TrUserData)}
                    end;
                <<"file_by_filename">> ->
                    if JValue =:= binary -> EMsg;
                       true -> EMsg#{message_request => id({file_by_filename, id(fj_string(JValue), TrUserData)}, TrUserData)}
                    end;
                <<"fileByFilename">> ->
                    if JValue =:= binary -> EMsg;
                       true -> EMsg#{message_request => id({file_by_filename, id(fj_string(JValue), TrUserData)}, TrUserData)}
                    end;
                <<"file_containing_symbol">> ->
                    if JValue =:= binary -> EMsg;
                       true -> EMsg#{message_request => id({file_containing_symbol, id(fj_string(JValue), TrUserData)}, TrUserData)}
                    end;
                <<"fileContainingSymbol">> ->
                    if JValue =:= binary -> EMsg;
                       true -> EMsg#{message_request => id({file_containing_symbol, id(fj_string(JValue), TrUserData)}, TrUserData)}
                    end;
                <<"file_containing_extension">> ->
                    if JValue =:= binary -> EMsg;
                       true -> EMsg#{message_request => id({file_containing_extension, id('from_json_msg_grpc.reflection.v1alpha.ExtensionRequest'(JValue, TrUserData), TrUserData)}, TrUserData)}
                    end;
                <<"fileContainingExtension">> ->
                    if JValue =:= binary -> EMsg;
                       true -> EMsg#{message_request => id({file_containing_extension, id('from_json_msg_grpc.reflection.v1alpha.ExtensionRequest'(JValue, TrUserData), TrUserData)}, TrUserData)}
                    end;
                <<"all_extension_numbers_of_type">> ->
                    if JValue =:= binary -> EMsg;
                       true -> EMsg#{message_request => id({all_extension_numbers_of_type, id(fj_string(JValue), TrUserData)}, TrUserData)}
                    end;
                <<"allExtensionNumbersOfType">> ->
                    if JValue =:= binary -> EMsg;
                       true -> EMsg#{message_request => id({all_extension_numbers_of_type, id(fj_string(JValue), TrUserData)}, TrUserData)}
                    end;
                <<"list_services">> ->
                    if JValue =:= binary -> EMsg;
                       true -> EMsg#{message_request => id({list_services, id(fj_string(JValue), TrUserData)}, TrUserData)}
                    end;
                <<"listServices">> ->
                    if JValue =:= binary -> EMsg;
                       true -> EMsg#{message_request => id({list_services, id(fj_string(JValue), TrUserData)}, TrUserData)}
                    end;
                _ -> EMsg
            end,
    'fj_msg_grpc.reflection.v1alpha.ServerReflectionRequest'(fj_next(JRest), EMsg2, TrUserData);
'fj_msg_grpc.reflection.v1alpha.ServerReflectionRequest'(none, EMsg, _TrUserData) -> EMsg.

'from_json_msg_grpc.reflection.v1alpha.ExtensionRequest'(Json, TrUserData) -> 'fj_msg_grpc.reflection.v1alpha.ExtensionRequest'(fj_next(fj_iter(Json)), #{containing_type => id(<<>>, TrUserData), extension_number => id(0, TrUserData)}, TrUserData).

'fj_msg_grpc.reflection.v1alpha.ExtensionRequest'({JKey, JValue, JRest}, EMsg, TrUserData) ->
    EMsg2 = case JKey of
                <<"containing_type">> ->
                    if JValue =:= binary -> EMsg;
                       true -> EMsg#{containing_type => id(fj_string(JValue), TrUserData)}
                    end;
                <<"containingType">> ->
                    if JValue =:= binary -> EMsg;
                       true -> EMsg#{containing_type => id(fj_string(JValue), TrUserData)}
                    end;
                <<"extension_number">> ->
                    if JValue =:= binary -> EMsg;
                       true -> EMsg#{extension_number => id(fj_int(JValue), TrUserData)}
                    end;
                <<"extensionNumber">> ->
                    if JValue =:= binary -> EMsg;
                       true -> EMsg#{extension_number => id(fj_int(JValue), TrUserData)}
                    end;
                _ -> EMsg
            end,
    'fj_msg_grpc.reflection.v1alpha.ExtensionRequest'(fj_next(JRest), EMsg2, TrUserData);
'fj_msg_grpc.reflection.v1alpha.ExtensionRequest'(none, EMsg, _TrUserData) -> EMsg.

'from_json_msg_grpc.reflection.v1alpha.ServerReflectionResponse'(Json, TrUserData) -> 'fj_msg_grpc.reflection.v1alpha.ServerReflectionResponse'(fj_next(fj_iter(Json)), #{valid_host => id(<<>>, TrUserData)}, TrUserData).

'fj_msg_grpc.reflection.v1alpha.ServerReflectionResponse'({JKey, JValue, JRest}, EMsg, TrUserData) ->
    EMsg2 = case JKey of
                <<"valid_host">> ->
                    if JValue =:= binary -> EMsg;
                       true -> EMsg#{valid_host => id(fj_string(JValue), TrUserData)}
                    end;
                <<"validHost">> ->
                    if JValue =:= binary -> EMsg;
                       true -> EMsg#{valid_host => id(fj_string(JValue), TrUserData)}
                    end;
                <<"original_request">> ->
                    if JValue =:= binary -> EMsg;
                       true -> EMsg#{original_request => id('from_json_msg_grpc.reflection.v1alpha.ServerReflectionRequest'(JValue, TrUserData), TrUserData)}
                    end;
                <<"originalRequest">> ->
                    if JValue =:= binary -> EMsg;
                       true -> EMsg#{original_request => id('from_json_msg_grpc.reflection.v1alpha.ServerReflectionRequest'(JValue, TrUserData), TrUserData)}
                    end;
                <<"file_descriptor_response">> ->
                    if JValue =:= binary -> EMsg;
                       true -> EMsg#{message_response => id({file_descriptor_response, id('from_json_msg_grpc.reflection.v1alpha.FileDescriptorResponse'(JValue, TrUserData), TrUserData)}, TrUserData)}
                    end;
                <<"fileDescriptorResponse">> ->
                    if JValue =:= binary -> EMsg;
                       true -> EMsg#{message_response => id({file_descriptor_response, id('from_json_msg_grpc.reflection.v1alpha.FileDescriptorResponse'(JValue, TrUserData), TrUserData)}, TrUserData)}
                    end;
                <<"all_extension_numbers_response">> ->
                    if JValue =:= binary -> EMsg;
                       true -> EMsg#{message_response => id({all_extension_numbers_response, id('from_json_msg_grpc.reflection.v1alpha.ExtensionNumberResponse'(JValue, TrUserData), TrUserData)}, TrUserData)}
                    end;
                <<"allExtensionNumbersResponse">> ->
                    if JValue =:= binary -> EMsg;
                       true -> EMsg#{message_response => id({all_extension_numbers_response, id('from_json_msg_grpc.reflection.v1alpha.ExtensionNumberResponse'(JValue, TrUserData), TrUserData)}, TrUserData)}
                    end;
                <<"list_services_response">> ->
                    if JValue =:= binary -> EMsg;
                       true -> EMsg#{message_response => id({list_services_response, id('from_json_msg_grpc.reflection.v1alpha.ListServiceResponse'(JValue, TrUserData), TrUserData)}, TrUserData)}
                    end;
                <<"listServicesResponse">> ->
                    if JValue =:= binary -> EMsg;
                       true -> EMsg#{message_response => id({list_services_response, id('from_json_msg_grpc.reflection.v1alpha.ListServiceResponse'(JValue, TrUserData), TrUserData)}, TrUserData)}
                    end;
                <<"error_response">> ->
                    if JValue =:= binary -> EMsg;
                       true -> EMsg#{message_response => id({error_response, id('from_json_msg_grpc.reflection.v1alpha.ErrorResponse'(JValue, TrUserData), TrUserData)}, TrUserData)}
                    end;
                <<"errorResponse">> ->
                    if JValue =:= binary -> EMsg;
                       true -> EMsg#{message_response => id({error_response, id('from_json_msg_grpc.reflection.v1alpha.ErrorResponse'(JValue, TrUserData), TrUserData)}, TrUserData)}
                    end;
                _ -> EMsg
            end,
    'fj_msg_grpc.reflection.v1alpha.ServerReflectionResponse'(fj_next(JRest), EMsg2, TrUserData);
'fj_msg_grpc.reflection.v1alpha.ServerReflectionResponse'(none, EMsg, _TrUserData) -> EMsg.

'from_json_msg_grpc.reflection.v1alpha.FileDescriptorResponse'(Json, TrUserData) -> 'fj_msg_grpc.reflection.v1alpha.FileDescriptorResponse'(fj_next(fj_iter(Json)), #{file_descriptor_proto => id([], TrUserData)}, TrUserData).

'fj_msg_grpc.reflection.v1alpha.FileDescriptorResponse'({JKey, JValue, JRest}, EMsg, TrUserData) ->
    EMsg2 = case JKey of
                <<"file_descriptor_proto">> ->
                    if JValue =:= binary -> EMsg;
                       true ->
                           EMsg#{file_descriptor_proto => id(lists_reverse(lists:foldl(fun (JElem@file_descriptor_proto, Acc) -> cons(id(fj_bytes(JElem@file_descriptor_proto), TrUserData), Acc, TrUserData) end, id([], TrUserData), fj_array(JValue)), TrUserData), TrUserData)}
                    end;
                <<"fileDescriptorProto">> ->
                    if JValue =:= binary -> EMsg;
                       true ->
                           EMsg#{file_descriptor_proto => id(lists_reverse(lists:foldl(fun (JElem@file_descriptor_proto, Acc) -> cons(id(fj_bytes(JElem@file_descriptor_proto), TrUserData), Acc, TrUserData) end, id([], TrUserData), fj_array(JValue)), TrUserData), TrUserData)}
                    end;
                _ -> EMsg
            end,
    'fj_msg_grpc.reflection.v1alpha.FileDescriptorResponse'(fj_next(JRest), EMsg2, TrUserData);
'fj_msg_grpc.reflection.v1alpha.FileDescriptorResponse'(none, EMsg, _TrUserData) -> EMsg.

'from_json_msg_grpc.reflection.v1alpha.ExtensionNumberResponse'(Json, TrUserData) ->
    'fj_msg_grpc.reflection.v1alpha.ExtensionNumberResponse'(fj_next(fj_iter(Json)), #{base_type_name => id(<<>>, TrUserData), extension_number => id([], TrUserData)}, TrUserData).

'fj_msg_grpc.reflection.v1alpha.ExtensionNumberResponse'({JKey, JValue, JRest}, EMsg, TrUserData) ->
    EMsg2 = case JKey of
                <<"base_type_name">> ->
                    if JValue =:= binary -> EMsg;
                       true -> EMsg#{base_type_name => id(fj_string(JValue), TrUserData)}
                    end;
                <<"baseTypeName">> ->
                    if JValue =:= binary -> EMsg;
                       true -> EMsg#{base_type_name => id(fj_string(JValue), TrUserData)}
                    end;
                <<"extension_number">> ->
                    if JValue =:= binary -> EMsg;
                       true -> EMsg#{extension_number => id(lists_reverse(lists:foldl(fun (JElem@extension_number, Acc) -> cons(id(fj_int(JElem@extension_number), TrUserData), Acc, TrUserData) end, id([], TrUserData), fj_array(JValue)), TrUserData), TrUserData)}
                    end;
                <<"extensionNumber">> ->
                    if JValue =:= binary -> EMsg;
                       true -> EMsg#{extension_number => id(lists_reverse(lists:foldl(fun (JElem@extension_number, Acc) -> cons(id(fj_int(JElem@extension_number), TrUserData), Acc, TrUserData) end, id([], TrUserData), fj_array(JValue)), TrUserData), TrUserData)}
                    end;
                _ -> EMsg
            end,
    'fj_msg_grpc.reflection.v1alpha.ExtensionNumberResponse'(fj_next(JRest), EMsg2, TrUserData);
'fj_msg_grpc.reflection.v1alpha.ExtensionNumberResponse'(none, EMsg, _TrUserData) -> EMsg.

'from_json_msg_grpc.reflection.v1alpha.ListServiceResponse'(Json, TrUserData) -> 'fj_msg_grpc.reflection.v1alpha.ListServiceResponse'(fj_next(fj_iter(Json)), #{}, TrUserData).

'fj_msg_grpc.reflection.v1alpha.ListServiceResponse'({JKey, JValue, JRest}, EMsg, TrUserData) ->
    EMsg2 = case JKey of
                <<"service">> ->
                    if JValue =:= binary -> EMsg;
                       true ->
                           EMsg#{service =>
                                     id(lists_reverse(lists:foldl(fun (JElem@service, Acc) -> cons(id('from_json_msg_grpc.reflection.v1alpha.ServiceResponse'(JElem@service, TrUserData), TrUserData), Acc, TrUserData) end, id([], TrUserData), fj_array(JValue)), TrUserData), TrUserData)}
                    end;
                _ -> EMsg
            end,
    'fj_msg_grpc.reflection.v1alpha.ListServiceResponse'(fj_next(JRest), EMsg2, TrUserData);
'fj_msg_grpc.reflection.v1alpha.ListServiceResponse'(none, EMsg, _TrUserData) -> EMsg.

'from_json_msg_grpc.reflection.v1alpha.ServiceResponse'(Json, TrUserData) -> 'fj_msg_grpc.reflection.v1alpha.ServiceResponse'(fj_next(fj_iter(Json)), #{name => id(<<>>, TrUserData)}, TrUserData).

'fj_msg_grpc.reflection.v1alpha.ServiceResponse'({JKey, JValue, JRest}, EMsg, TrUserData) ->
    EMsg2 = case JKey of
                <<"name">> ->
                    if JValue =:= binary -> EMsg;
                       true -> EMsg#{name => id(fj_string(JValue), TrUserData)}
                    end;
                _ -> EMsg
            end,
    'fj_msg_grpc.reflection.v1alpha.ServiceResponse'(fj_next(JRest), EMsg2, TrUserData);
'fj_msg_grpc.reflection.v1alpha.ServiceResponse'(none, EMsg, _TrUserData) -> EMsg.

'from_json_msg_grpc.reflection.v1alpha.ErrorResponse'(Json, TrUserData) -> 'fj_msg_grpc.reflection.v1alpha.ErrorResponse'(fj_next(fj_iter(Json)), #{error_code => id(0, TrUserData), error_message => id(<<>>, TrUserData)}, TrUserData).

'fj_msg_grpc.reflection.v1alpha.ErrorResponse'({JKey, JValue, JRest}, EMsg, TrUserData) ->
    EMsg2 = case JKey of
                <<"error_code">> ->
                    if JValue =:= binary -> EMsg;
                       true -> EMsg#{error_code => id(fj_int(JValue), TrUserData)}
                    end;
                <<"errorCode">> ->
                    if JValue =:= binary -> EMsg;
                       true -> EMsg#{error_code => id(fj_int(JValue), TrUserData)}
                    end;
                <<"error_message">> ->
                    if JValue =:= binary -> EMsg;
                       true -> EMsg#{error_message => id(fj_string(JValue), TrUserData)}
                    end;
                <<"errorMessage">> ->
                    if JValue =:= binary -> EMsg;
                       true -> EMsg#{error_message => id(fj_string(JValue), TrUserData)}
                    end;
                _ -> EMsg
            end,
    'fj_msg_grpc.reflection.v1alpha.ErrorResponse'(fj_next(JRest), EMsg2, TrUserData);
'fj_msg_grpc.reflection.v1alpha.ErrorResponse'(none, EMsg, _TrUserData) -> EMsg.

fj_iter(Map) -> maps:iterator(Map).

fj_next(Iter) -> maps:next(Iter).

-compile({nowarn_unused_function,fj_array/1}).
fj_array(L) -> L.

-compile({nowarn_unused_function,fj_int/1}).
fj_int(N) when is_integer(N) -> N;
fj_int(S) when is_binary(S) -> list_to_integer(binary_to_list(S));
fj_int(S) when is_list(S) -> list_to_integer(S).

fj_string(S) when is_binary(S); is_list(S) -> unicode:characters_to_binary(S).

fj_bytes(S) when is_binary(S); is_list(S) ->
    B64 = << <<if C =:= $- -> $+;
                  C =:= $_ -> $/;
                  true -> C
               end>>
              || <<C>> <= iolist_to_binary(S) >>,
    base64:decode(B64).


get_msg_defs() ->
    [{{msg, 'grpc.reflection.v1alpha.ServerReflectionRequest'},
      [#{name => host, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []},
       #{name => message_request, rnum => 3,
         fields =>
             [#{name => file_by_filename, fnum => 3, rnum => 3, type => string, occurrence => optional, opts => []},
              #{name => file_containing_symbol, fnum => 4, rnum => 3, type => string, occurrence => optional, opts => []},
              #{name => file_containing_extension, fnum => 5, rnum => 3, type => {msg, 'grpc.reflection.v1alpha.ExtensionRequest'}, occurrence => optional, opts => []},
              #{name => all_extension_numbers_of_type, fnum => 6, rnum => 3, type => string, occurrence => optional, opts => []},
              #{name => list_services, fnum => 7, rnum => 3, type => string, occurrence => optional, opts => []}],
         opts => []}]},
     {{msg, 'grpc.reflection.v1alpha.ExtensionRequest'},
      [#{name => containing_type, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []}, #{name => extension_number, fnum => 2, rnum => 3, type => int32, occurrence => optional, opts => []}]},
     {{msg, 'grpc.reflection.v1alpha.ServerReflectionResponse'},
      [#{name => valid_host, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []},
       #{name => original_request, fnum => 2, rnum => 3, type => {msg, 'grpc.reflection.v1alpha.ServerReflectionRequest'}, occurrence => optional, opts => []},
       #{name => message_response, rnum => 4,
         fields =>
             [#{name => file_descriptor_response, fnum => 4, rnum => 4, type => {msg, 'grpc.reflection.v1alpha.FileDescriptorResponse'}, occurrence => optional, opts => []},
              #{name => all_extension_numbers_response, fnum => 5, rnum => 4, type => {msg, 'grpc.reflection.v1alpha.ExtensionNumberResponse'}, occurrence => optional, opts => []},
              #{name => list_services_response, fnum => 6, rnum => 4, type => {msg, 'grpc.reflection.v1alpha.ListServiceResponse'}, occurrence => optional, opts => []},
              #{name => error_response, fnum => 7, rnum => 4, type => {msg, 'grpc.reflection.v1alpha.ErrorResponse'}, occurrence => optional, opts => []}],
         opts => []}]},
     {{msg, 'grpc.reflection.v1alpha.FileDescriptorResponse'}, [#{name => file_descriptor_proto, fnum => 1, rnum => 2, type => bytes, occurrence => repeated, opts => []}]},
     {{msg, 'grpc.reflection.v1alpha.ExtensionNumberResponse'},
      [#{name => base_type_name, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []}, #{name => extension_number, fnum => 2, rnum => 3, type => int32, occurrence => repeated, opts => [packed]}]},
     {{msg, 'grpc.reflection.v1alpha.ListServiceResponse'}, [#{name => service, fnum => 1, rnum => 2, type => {msg, 'grpc.reflection.v1alpha.ServiceResponse'}, occurrence => repeated, opts => []}]},
     {{msg, 'grpc.reflection.v1alpha.ServiceResponse'}, [#{name => name, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []}]},
     {{msg, 'grpc.reflection.v1alpha.ErrorResponse'}, [#{name => error_code, fnum => 1, rnum => 2, type => int32, occurrence => optional, opts => []}, #{name => error_message, fnum => 2, rnum => 3, type => string, occurrence => optional, opts => []}]}].


get_msg_names() ->
    ['grpc.reflection.v1alpha.ServerReflectionRequest',
     'grpc.reflection.v1alpha.ExtensionRequest',
     'grpc.reflection.v1alpha.ServerReflectionResponse',
     'grpc.reflection.v1alpha.FileDescriptorResponse',
     'grpc.reflection.v1alpha.ExtensionNumberResponse',
     'grpc.reflection.v1alpha.ListServiceResponse',
     'grpc.reflection.v1alpha.ServiceResponse',
     'grpc.reflection.v1alpha.ErrorResponse'].


get_group_names() -> [].


get_msg_or_group_names() ->
    ['grpc.reflection.v1alpha.ServerReflectionRequest',
     'grpc.reflection.v1alpha.ExtensionRequest',
     'grpc.reflection.v1alpha.ServerReflectionResponse',
     'grpc.reflection.v1alpha.FileDescriptorResponse',
     'grpc.reflection.v1alpha.ExtensionNumberResponse',
     'grpc.reflection.v1alpha.ListServiceResponse',
     'grpc.reflection.v1alpha.ServiceResponse',
     'grpc.reflection.v1alpha.ErrorResponse'].


get_enum_names() -> [].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
        Fs when is_list(Fs) -> Fs;
        error -> erlang:error({no_such_msg, MsgName})
    end.


-spec fetch_enum_def(_) -> no_return().
fetch_enum_def(EnumName) -> erlang:error({no_such_enum, EnumName}).


find_msg_def('grpc.reflection.v1alpha.ServerReflectionRequest') ->
    [#{name => host, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []},
     #{name => message_request, rnum => 3,
       fields =>
           [#{name => file_by_filename, fnum => 3, rnum => 3, type => string, occurrence => optional, opts => []},
            #{name => file_containing_symbol, fnum => 4, rnum => 3, type => string, occurrence => optional, opts => []},
            #{name => file_containing_extension, fnum => 5, rnum => 3, type => {msg, 'grpc.reflection.v1alpha.ExtensionRequest'}, occurrence => optional, opts => []},
            #{name => all_extension_numbers_of_type, fnum => 6, rnum => 3, type => string, occurrence => optional, opts => []},
            #{name => list_services, fnum => 7, rnum => 3, type => string, occurrence => optional, opts => []}],
       opts => []}];
find_msg_def('grpc.reflection.v1alpha.ExtensionRequest') ->
    [#{name => containing_type, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []}, #{name => extension_number, fnum => 2, rnum => 3, type => int32, occurrence => optional, opts => []}];
find_msg_def('grpc.reflection.v1alpha.ServerReflectionResponse') ->
    [#{name => valid_host, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []},
     #{name => original_request, fnum => 2, rnum => 3, type => {msg, 'grpc.reflection.v1alpha.ServerReflectionRequest'}, occurrence => optional, opts => []},
     #{name => message_response, rnum => 4,
       fields =>
           [#{name => file_descriptor_response, fnum => 4, rnum => 4, type => {msg, 'grpc.reflection.v1alpha.FileDescriptorResponse'}, occurrence => optional, opts => []},
            #{name => all_extension_numbers_response, fnum => 5, rnum => 4, type => {msg, 'grpc.reflection.v1alpha.ExtensionNumberResponse'}, occurrence => optional, opts => []},
            #{name => list_services_response, fnum => 6, rnum => 4, type => {msg, 'grpc.reflection.v1alpha.ListServiceResponse'}, occurrence => optional, opts => []},
            #{name => error_response, fnum => 7, rnum => 4, type => {msg, 'grpc.reflection.v1alpha.ErrorResponse'}, occurrence => optional, opts => []}],
       opts => []}];
find_msg_def('grpc.reflection.v1alpha.FileDescriptorResponse') -> [#{name => file_descriptor_proto, fnum => 1, rnum => 2, type => bytes, occurrence => repeated, opts => []}];
find_msg_def('grpc.reflection.v1alpha.ExtensionNumberResponse') ->
    [#{name => base_type_name, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []}, #{name => extension_number, fnum => 2, rnum => 3, type => int32, occurrence => repeated, opts => [packed]}];
find_msg_def('grpc.reflection.v1alpha.ListServiceResponse') -> [#{name => service, fnum => 1, rnum => 2, type => {msg, 'grpc.reflection.v1alpha.ServiceResponse'}, occurrence => repeated, opts => []}];
find_msg_def('grpc.reflection.v1alpha.ServiceResponse') -> [#{name => name, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []}];
find_msg_def('grpc.reflection.v1alpha.ErrorResponse') ->
    [#{name => error_code, fnum => 1, rnum => 2, type => int32, occurrence => optional, opts => []}, #{name => error_message, fnum => 2, rnum => 3, type => string, occurrence => optional, opts => []}];
find_msg_def(_) -> error.


find_enum_def(_) -> error.


-spec enum_symbol_by_value(_, _) -> no_return().
enum_symbol_by_value(E, V) -> erlang:error({no_enum_defs, E, V}).


-spec enum_value_by_symbol(_, _) -> no_return().
enum_value_by_symbol(E, V) -> erlang:error({no_enum_defs, E, V}).



get_service_names() -> ['grpc.reflection.v1alpha.ServerReflection'].


get_service_def('grpc.reflection.v1alpha.ServerReflection') ->
    {{service, 'grpc.reflection.v1alpha.ServerReflection'},
     [#{name => 'ServerReflectionInfo', input => 'grpc.reflection.v1alpha.ServerReflectionRequest', output => 'grpc.reflection.v1alpha.ServerReflectionResponse', input_stream => true, output_stream => true, opts => []}]};
get_service_def(_) -> error.


get_rpc_names('grpc.reflection.v1alpha.ServerReflection') -> ['ServerReflectionInfo'];
get_rpc_names(_) -> error.


find_rpc_def('grpc.reflection.v1alpha.ServerReflection', RpcName) -> 'find_rpc_def_grpc.reflection.v1alpha.ServerReflection'(RpcName);
find_rpc_def(_, _) -> error.


'find_rpc_def_grpc.reflection.v1alpha.ServerReflection'('ServerReflectionInfo') ->
    #{name => 'ServerReflectionInfo', input => 'grpc.reflection.v1alpha.ServerReflectionRequest', output => 'grpc.reflection.v1alpha.ServerReflectionResponse', input_stream => true, output_stream => true, opts => []};
'find_rpc_def_grpc.reflection.v1alpha.ServerReflection'(_) -> error.


fetch_rpc_def(ServiceName, RpcName) ->
    case find_rpc_def(ServiceName, RpcName) of
        Def when is_map(Def) -> Def;
        error -> erlang:error({no_such_rpc, ServiceName, RpcName})
    end.


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
fqbin_to_service_name(<<"grpc.reflection.v1alpha.ServerReflection">>) -> 'grpc.reflection.v1alpha.ServerReflection';
fqbin_to_service_name(X) -> error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified
%% (ie with package name) name as a binary.
service_name_to_fqbin('grpc.reflection.v1alpha.ServerReflection') -> <<"grpc.reflection.v1alpha.ServerReflection">>;
service_name_to_fqbin(X) -> error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
fqbins_to_service_and_rpc_name(<<"grpc.reflection.v1alpha.ServerReflection">>, <<"ServerReflectionInfo">>) -> {'grpc.reflection.v1alpha.ServerReflection', 'ServerReflectionInfo'};
fqbins_to_service_and_rpc_name(S, R) -> error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
service_and_rpc_name_to_fqbins('grpc.reflection.v1alpha.ServerReflection', 'ServerReflectionInfo') -> {<<"grpc.reflection.v1alpha.ServerReflection">>, <<"ServerReflectionInfo">>};
service_and_rpc_name_to_fqbins(S, R) -> error({gpb_error, {badservice_or_rpc, {S, R}}}).


fqbin_to_msg_name(<<"grpc.reflection.v1alpha.ServerReflectionRequest">>) -> 'grpc.reflection.v1alpha.ServerReflectionRequest';
fqbin_to_msg_name(<<"grpc.reflection.v1alpha.ExtensionRequest">>) -> 'grpc.reflection.v1alpha.ExtensionRequest';
fqbin_to_msg_name(<<"grpc.reflection.v1alpha.ServerReflectionResponse">>) -> 'grpc.reflection.v1alpha.ServerReflectionResponse';
fqbin_to_msg_name(<<"grpc.reflection.v1alpha.FileDescriptorResponse">>) -> 'grpc.reflection.v1alpha.FileDescriptorResponse';
fqbin_to_msg_name(<<"grpc.reflection.v1alpha.ExtensionNumberResponse">>) -> 'grpc.reflection.v1alpha.ExtensionNumberResponse';
fqbin_to_msg_name(<<"grpc.reflection.v1alpha.ListServiceResponse">>) -> 'grpc.reflection.v1alpha.ListServiceResponse';
fqbin_to_msg_name(<<"grpc.reflection.v1alpha.ServiceResponse">>) -> 'grpc.reflection.v1alpha.ServiceResponse';
fqbin_to_msg_name(<<"grpc.reflection.v1alpha.ErrorResponse">>) -> 'grpc.reflection.v1alpha.ErrorResponse';
fqbin_to_msg_name(E) -> error({gpb_error, {badmsg, E}}).


msg_name_to_fqbin('grpc.reflection.v1alpha.ServerReflectionRequest') -> <<"grpc.reflection.v1alpha.ServerReflectionRequest">>;
msg_name_to_fqbin('grpc.reflection.v1alpha.ExtensionRequest') -> <<"grpc.reflection.v1alpha.ExtensionRequest">>;
msg_name_to_fqbin('grpc.reflection.v1alpha.ServerReflectionResponse') -> <<"grpc.reflection.v1alpha.ServerReflectionResponse">>;
msg_name_to_fqbin('grpc.reflection.v1alpha.FileDescriptorResponse') -> <<"grpc.reflection.v1alpha.FileDescriptorResponse">>;
msg_name_to_fqbin('grpc.reflection.v1alpha.ExtensionNumberResponse') -> <<"grpc.reflection.v1alpha.ExtensionNumberResponse">>;
msg_name_to_fqbin('grpc.reflection.v1alpha.ListServiceResponse') -> <<"grpc.reflection.v1alpha.ListServiceResponse">>;
msg_name_to_fqbin('grpc.reflection.v1alpha.ServiceResponse') -> <<"grpc.reflection.v1alpha.ServiceResponse">>;
msg_name_to_fqbin('grpc.reflection.v1alpha.ErrorResponse') -> <<"grpc.reflection.v1alpha.ErrorResponse">>;
msg_name_to_fqbin(E) -> error({gpb_error, {badmsg, E}}).


-spec fqbin_to_enum_name(_) -> no_return().
fqbin_to_enum_name(E) -> error({gpb_error, {badenum, E}}).


-spec enum_name_to_fqbin(_) -> no_return().
enum_name_to_fqbin(E) -> error({gpb_error, {badenum, E}}).


get_package_name() -> 'grpc.reflection.v1alpha'.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> true.


source_basename() -> "reflection_v1alpha.proto".


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned with extension,
%% see get_all_proto_names/0 for a version that returns
%% the basenames sans extension
get_all_source_basenames() -> ["reflection_v1alpha.proto"].


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned sans .proto extension,
%% to make it easier to use them with the various get_xyz_containment
%% functions.
get_all_proto_names() -> ["reflection_v1alpha"].


get_msg_containment("reflection_v1alpha") ->
    ['grpc.reflection.v1alpha.ErrorResponse',
     'grpc.reflection.v1alpha.ExtensionNumberResponse',
     'grpc.reflection.v1alpha.ExtensionRequest',
     'grpc.reflection.v1alpha.FileDescriptorResponse',
     'grpc.reflection.v1alpha.ListServiceResponse',
     'grpc.reflection.v1alpha.ServerReflectionRequest',
     'grpc.reflection.v1alpha.ServerReflectionResponse',
     'grpc.reflection.v1alpha.ServiceResponse'];
get_msg_containment(P) -> error({gpb_error, {badproto, P}}).


get_pkg_containment("reflection_v1alpha") -> 'grpc.reflection.v1alpha';
get_pkg_containment(P) -> error({gpb_error, {badproto, P}}).


get_service_containment("reflection_v1alpha") -> ['grpc.reflection.v1alpha.ServerReflection'];
get_service_containment(P) -> error({gpb_error, {badproto, P}}).


get_rpc_containment("reflection_v1alpha") -> [{'grpc.reflection.v1alpha.ServerReflection', 'ServerReflectionInfo'}];
get_rpc_containment(P) -> error({gpb_error, {badproto, P}}).


get_enum_containment("reflection_v1alpha") -> [];
get_enum_containment(P) -> error({gpb_error, {badproto, P}}).


get_proto_by_msg_name_as_fqbin(<<"grpc.reflection.v1alpha.ServerReflectionRequest">>) -> "reflection_v1alpha";
get_proto_by_msg_name_as_fqbin(<<"grpc.reflection.v1alpha.ExtensionRequest">>) -> "reflection_v1alpha";
get_proto_by_msg_name_as_fqbin(<<"grpc.reflection.v1alpha.ServiceResponse">>) -> "reflection_v1alpha";
get_proto_by_msg_name_as_fqbin(<<"grpc.reflection.v1alpha.ServerReflectionResponse">>) -> "reflection_v1alpha";
get_proto_by_msg_name_as_fqbin(<<"grpc.reflection.v1alpha.ListServiceResponse">>) -> "reflection_v1alpha";
get_proto_by_msg_name_as_fqbin(<<"grpc.reflection.v1alpha.FileDescriptorResponse">>) -> "reflection_v1alpha";
get_proto_by_msg_name_as_fqbin(<<"grpc.reflection.v1alpha.ExtensionNumberResponse">>) -> "reflection_v1alpha";
get_proto_by_msg_name_as_fqbin(<<"grpc.reflection.v1alpha.ErrorResponse">>) -> "reflection_v1alpha";
get_proto_by_msg_name_as_fqbin(E) -> error({gpb_error, {badmsg, E}}).


get_proto_by_service_name_as_fqbin(<<"grpc.reflection.v1alpha.ServerReflection">>) -> "reflection_v1alpha";
get_proto_by_service_name_as_fqbin(E) -> error({gpb_error, {badservice, E}}).


-spec get_proto_by_enum_name_as_fqbin(_) -> no_return().
get_proto_by_enum_name_as_fqbin(E) -> error({gpb_error, {badenum, E}}).


get_protos_by_pkg_name_as_fqbin(<<"grpc.reflection.v1alpha">>) -> ["reflection_v1alpha"];
get_protos_by_pkg_name_as_fqbin(E) -> error({gpb_error, {badpkg, E}}).



gpb_version_as_string() ->
    "4.21.3".

gpb_version_as_list() ->
    [4,21,3].

gpb_version_source() ->
    "file".
