%%
%% @doc This module is auto-generated by rebar3_egrpc_plugin.
%%
%% This module was generated on 2025-06-22T06:13:44+00:00 and should not be modified manually
%% @end

-module(egrpc_grpc_health_v1_health_client).

-ignore_xref(egrpc_grpc_health_v1_health_client).

-export([check/2, check/3]).
-export([list/2, list/3]).
-export([watch/2, watch/3]).

-define(GRPC_SERVICE_NAME, 'grpc.health.v1.Health').

%% @doc Call the unary RPC method `Check' of service `grpc.health.v1.Health'.
-spec check(egrpc:channel(), Request) -> Result when
    Request :: egrpc_health_pb:'grpc.health.v1.HealthCheckRequest'(),
    Response :: egrpc_health_pb:'grpc.health.v1.HealthCheckResponse'(),
    Result :: egrpc_stub:unary_ret(Response).
check(Channel, Request) ->
    check(Channel, Request, #{}).

-spec check(egrpc:channel(), Request, Opts) -> Result when
    Result :: egrpc_stub:unary_ret(Response),
    Request :: egrpc_health_pb:'grpc.health.v1.HealthCheckRequest'(),
    Response :: egrpc_health_pb:'grpc.health.v1.HealthCheckResponse'(),
    Opts :: egrpc_stub:opts().
check(Channel, Request, Opts) ->
    RpcDef = egrpc_health_pb:find_rpc_def(?GRPC_SERVICE_NAME, 'Check'),
    Grpc = #{
        rpc_def => RpcDef,
        path => <<"/grpc.health.v1.Health/Check">>,
        pb_module => egrpc_health_pb,
        service_name => ?GRPC_SERVICE_NAME
    },
    egrpc_stub:unary(Channel, Request, Grpc, Opts).

%% @doc Call the unary RPC method `List' of service `grpc.health.v1.Health'.
-spec list(egrpc:channel(), Request) -> Result when
    Request :: egrpc_health_pb:'grpc.health.v1.HealthListRequest'(),
    Response :: egrpc_health_pb:'grpc.health.v1.HealthListResponse'(),
    Result :: egrpc_stub:unary_ret(Response).
list(Channel, Request) ->
    list(Channel, Request, #{}).

-spec list(egrpc:channel(), Request, Opts) -> Result when
    Result :: egrpc_stub:unary_ret(Response),
    Request :: egrpc_health_pb:'grpc.health.v1.HealthListRequest'(),
    Response :: egrpc_health_pb:'grpc.health.v1.HealthListResponse'(),
    Opts :: egrpc_stub:opts().
list(Channel, Request, Opts) ->
    RpcDef = egrpc_health_pb:find_rpc_def(?GRPC_SERVICE_NAME, 'List'),
    Grpc = #{
        rpc_def => RpcDef,
        path => <<"/grpc.health.v1.Health/List">>,
        pb_module => egrpc_health_pb,
        service_name => ?GRPC_SERVICE_NAME
    },
    egrpc_stub:unary(Channel, Request, Grpc, Opts).

%% @doc Call the server_streaming RPC method `Watch' of service `grpc.health.v1.Health'.
-spec watch(egrpc:channel(), Request) -> Result when
    Request :: egrpc_health_pb:'grpc.health.v1.HealthCheckRequest'(),
    Result :: egrpc_stub:server_streaming_ret().
watch(Channel, Request) ->
    watch(Channel, Request, #{}).

-spec watch(egrpc:channel(), Request, Opts) -> Result when
    Result :: egrpc_stub:server_streaming_ret(),
    Request :: egrpc_health_pb:'grpc.health.v1.HealthCheckRequest'(),
    Opts :: egrpc_stub:opts().
watch(Channel, Request, Opts) ->
    RpcDef = egrpc_health_pb:find_rpc_def(?GRPC_SERVICE_NAME, 'Watch'),
    Grpc = #{
        rpc_def => RpcDef,
        path => <<"/grpc.health.v1.Health/Watch">>,
        pb_module => egrpc_health_pb,
        service_name => ?GRPC_SERVICE_NAME
    },
    egrpc_stub:server_streaming(Channel, Request, Grpc, Opts).
